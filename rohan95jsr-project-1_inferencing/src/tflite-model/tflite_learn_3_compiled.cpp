/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 27.02.2025 20:32:19

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 70336;
#else
constexpr int kTensorArenaSize = 69312;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_ADD, OP_PAD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,48,48,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0036601307801902294, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data2[2] = { 41454, -46774, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const TfArray<2, float> quant2_scale = { 2, { 8.3905768406111747e-05, 7.4598363426048309e-05, } };
const TfArray<2, int> quant2_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data3[2*1*1*32] = { 
  /* [0][0][][] */ 71,-41,-51,87,-80,1,-63,57,127,-15,-44,-25,-12,64,-37,21,97,-79,-42,-100,82,64,84,-60,-68,-62,-28,64,16,-72,-17,60, 
  /* [1][0][][] */ 54,92,90,-61,-75,93,0,25,-53,-34,52,126,126,57,45,9,-34,10,-61,-90,-77,49,24,127,102,83,-51,0,100,-110,-114,-11, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant3_scale = { 2, { 0.003730888944119215, 0.0033170329406857491, } };
const TfArray<2, int> quant3_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[32] = { -531, 1093, 1104, -968, -980, 1206, -1028, 1060, -349, 709, 1072, 1119, 908, 1046, 545, -1158, -1118, 345, -617, -1063, -1128, 1102, -937, 1032, 1051, 900, -604, -825, -1129, -617, -190, -1031, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 3.4462853363947943e-05, 3.9274251321330667e-05, 3.8680354919051751e-05, 3.7619225622620434e-05, 3.6861874832538888e-05, 3.591646600398235e-05, 3.8062753446865827e-05, 3.9252405258594081e-05, 3.397887121536769e-05, 3.6175988498143852e-05, 4.0626713598612696e-05, 3.8546342693734914e-05, 3.703627226059325e-05, 4.0517985326005146e-05, 3.6698453186545521e-05, 3.6691348213935271e-05, 3.8593836507061496e-05, 3.7791753129567951e-05, 3.6121575249126181e-05, 3.6644938518293202e-05, 3.5762812331086025e-05, 3.6319623177405447e-05, 3.6109788197791204e-05, 3.9040151023073122e-05, 3.9008631574688479e-05, 3.5837299947161227e-05, 4.0584258385933936e-05, 3.6103931051911786e-05, 3.7740548577858135e-05, 3.6088724300498143e-05, 3.5018911148654297e-05, 3.8545102142961696e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data5[32*1*1*48] = { 
  /* [0][0][][] */ -39,-62,100,1,90,-15,-94,-116,64,-105,-116,-11,49,1,-49,48,-60,-43,-70,-69,-76,-120,-5,104,-127,-1,71,-57,105,-4,-31,-97,78,-67,-108,67,-127,-86,-98,22,69,-101,-104,95,53,-121,113,-29, 
  /* [1][0][][] */ -39,8,-49,15,-20,92,54,25,94,-77,-84,110,73,-7,40,76,77,-23,47,127,-27,11,50,43,42,28,-56,116,28,23,108,-44,32,115,6,44,63,73,1,-42,-42,23,-4,-88,-18,52,-15,-44, 
  /* [2][0][][] */ 57,11,-40,106,-4,-39,102,105,-74,98,-20,121,97,3,95,-90,-79,-10,46,69,-73,2,120,37,-14,87,91,26,-47,93,91,105,-74,-1,-73,-83,-67,106,114,-8,-94,-55,30,-2,-64,127,-9,-65, 
  /* [3][0][][] */ 60,19,26,-34,-79,39,-124,25,35,9,50,-8,77,81,58,20,127,83,-66,3,98,-97,-75,-121,-32,-119,-83,89,27,-111,71,-4,-59,-45,-28,-28,-100,-38,25,31,-39,-96,-107,-5,58,14,-61,-92, 
  /* [4][0][][] */ 42,126,-12,38,-40,-34,14,2,44,75,-22,40,15,-49,-25,-75,1,-18,-74,3,90,-103,71,15,-27,-14,56,-72,-65,18,-80,-64,63,97,2,-115,-60,-23,-127,30,-65,-69,-87,-95,18,88,18,44, 
  /* [5][0][][] */ 112,-112,97,102,59,-98,47,74,127,-99,14,-53,38,118,54,53,35,77,-58,117,50,70,35,-9,-88,-47,-21,-73,68,50,34,-82,-46,21,-55,36,-99,-18,62,41,-71,-35,59,105,-18,42,52,-43, 
  /* [6][0][][] */ 4,-29,94,58,-94,-73,-16,51,-27,-89,-6,-95,70,41,96,-125,39,-9,-12,83,-86,-126,91,42,-67,-90,-14,-66,-41,-120,33,-86,-92,-127,-55,-113,-21,25,-117,65,69,40,9,-27,-118,90,-92,-52, 
  /* [7][0][][] */ 122,42,-18,-23,-52,123,0,16,127,21,-77,26,63,-64,60,81,38,30,12,122,67,48,11,97,-58,105,35,67,-55,116,-2,49,19,40,75,111,-84,97,5,-9,103,-57,96,67,61,14,109,-96, 
  /* [8][0][][] */ 10,63,-55,-105,64,18,-92,-31,-2,31,49,106,9,-54,-97,-65,-46,100,-71,10,26,-29,83,106,-117,112,60,88,-78,17,-97,120,116,-42,52,-12,126,1,-9,77,90,99,-127,-113,-13,-34,-19,122, 
  /* [9][0][][] */ 6,32,124,61,99,-106,-43,-108,47,69,2,70,-16,-63,-92,-1,28,13,-92,-59,13,115,-94,-94,127,8,12,40,-1,-54,-73,113,86,16,40,-14,-61,26,-21,-20,64,-43,61,-69,91,35,-84,73, 
  /* [10][0][][] */ -42,52,100,-43,1,111,114,42,54,45,34,-49,102,91,-14,25,-52,86,-75,-39,0,42,67,-45,39,61,-127,-84,-26,89,-68,-57,55,107,120,83,-23,22,-16,49,-17,119,-83,-34,-73,-35,11,-49, 
  /* [11][0][][] */ 119,-12,4,116,127,60,70,46,124,105,-59,118,7,-61,44,-47,-77,-81,74,56,47,87,39,-85,-90,-77,-43,83,93,11,41,-2,-107,-49,64,61,-45,88,-13,-38,-9,115,-52,7,-25,-38,-71,-79, 
  /* [12][0][][] */ 23,42,-38,17,98,24,-17,49,-56,75,-28,19,-54,28,63,-63,-121,-23,-40,-63,40,2,30,112,-84,-58,73,-103,106,26,-25,127,-109,-53,-36,32,6,-60,-10,55,122,55,-92,-40,-29,-68,-52,107, 
  /* [13][0][][] */ 113,-75,109,104,100,119,90,74,84,-76,24,-13,94,81,77,-29,-127,-49,-50,43,78,-9,122,-25,-50,47,1,33,-61,-63,90,50,30,111,-5,51,-61,-10,36,79,-41,85,-30,15,-24,42,13,-19, 
  /* [14][0][][] */ -50,-111,98,79,85,-19,-3,-106,-65,-25,78,82,-30,-70,-79,-82,-74,-57,21,35,-35,40,6,71,-120,-74,-58,40,-102,-107,-72,46,79,-13,-33,16,100,127,34,-116,1,-110,45,64,72,-109,41,-90, 
  /* [15][0][][] */ 2,-17,-44,56,73,-103,44,-111,42,-17,-84,-6,87,-13,-105,-127,103,-4,-106,7,31,3,57,91,66,48,58,73,2,38,50,-116,24,-10,-78,-19,-82,95,92,-85,-2,92,-63,-34,11,-92,-57,-92, 
  /* [16][0][][] */ -78,26,80,-74,23,89,-69,22,28,30,-114,55,-26,-62,-66,-72,127,60,53,44,87,59,-52,32,-42,38,-56,42,-113,-5,22,-4,-87,54,39,38,-47,34,-61,-82,5,-60,51,82,45,80,81,-19, 
  /* [17][0][][] */ 29,-127,40,93,-31,-97,-47,-87,57,-70,82,44,93,72,-99,58,10,45,99,124,-77,-8,17,-37,29,72,-98,41,117,-37,-25,82,-53,-7,27,15,-45,110,-87,-20,-84,-28,-5,-31,-4,17,67,-125, 
  /* [18][0][][] */ -103,118,100,-77,-16,-119,-112,-4,-14,65,-92,-55,-21,25,52,-43,34,-33,49,-32,92,-54,13,-87,25,-80,-26,127,45,26,-8,34,37,-36,-116,-115,-41,26,-43,55,-49,15,-59,-18,-123,7,16,-12, 
  /* [19][0][][] */ 7,41,61,25,44,-93,82,78,80,-73,19,-24,-107,21,-68,47,101,-114,97,44,-34,66,-67,0,69,-90,57,-75,-103,-127,-76,32,108,-93,20,-14,-4,-79,-65,-109,31,-126,-94,0,-94,19,97,-103, 
  /* [20][0][][] */ -24,99,55,80,-102,77,3,45,0,0,-98,-10,-23,74,26,-87,-26,-50,-79,-47,8,-60,-91,-87,67,-89,-80,33,6,-2,-54,99,127,29,-29,41,28,-47,-30,-123,-100,-50,-104,-112,-39,-77,-81,96, 
  /* [21][0][][] */ 107,50,88,-86,112,-59,91,33,17,-47,-59,53,17,55,-34,-87,-127,-17,41,3,124,-34,86,-67,64,-75,-58,89,31,21,7,-6,-19,37,-79,-96,124,113,-104,-28,7,20,45,-25,-85,-66,-77,94, 
  /* [22][0][][] */ 19,-54,-84,-110,82,-67,100,42,-95,88,-75,-116,99,-117,-126,-90,32,70,-119,-75,75,-88,18,16,94,-4,-126,102,-72,-87,-72,-125,39,51,3,-1,-5,-21,-72,-120,-6,-25,-12,92,52,-127,88,-36, 
  /* [23][0][][] */ 69,-107,20,69,104,-91,21,-79,70,-60,90,78,27,-84,33,-23,58,-20,-89,109,102,-62,110,-16,-8,-4,51,35,82,59,79,-21,-61,56,30,47,102,9,-92,19,-85,13,24,-127,-55,-69,108,24, 
  /* [24][0][][] */ -65,-67,-81,-46,-65,-88,-44,-68,81,127,89,51,115,76,-20,-107,-99,54,36,-32,109,-59,-36,-19,57,-20,65,68,119,70,21,-43,-9,27,58,45,-39,-62,73,0,-53,-92,115,-3,34,-16,56,74, 
  /* [25][0][][] */ -87,-84,-78,5,93,-67,-86,71,63,-98,-33,24,67,14,-101,-42,-101,72,36,-102,85,96,0,-58,10,-71,-112,42,93,-74,53,127,83,-97,50,90,102,-50,-12,-1,-77,80,-90,-10,112,59,82,40, 
  /* [26][0][][] */ 54,-80,-13,-20,-86,2,-19,-20,-104,-117,101,84,-44,-51,7,-13,127,25,-45,-56,5,60,82,13,71,83,28,68,9,6,-89,-8,-1,-57,-86,-99,-52,79,-53,90,-90,92,42,31,-64,59,-43,89, 
  /* [27][0][][] */ 2,11,-44,-111,-127,-54,-80,-28,31,89,27,-116,-29,46,71,-27,85,-27,52,-90,-105,1,-39,-18,-91,53,-116,-6,61,18,-43,-20,54,61,-101,-97,-99,-75,-123,78,-106,20,17,10,88,14,57,94, 
  /* [28][0][][] */ 71,-22,65,24,-127,-77,-108,-89,-39,-111,44,49,-95,-99,-14,79,74,89,-84,53,-44,4,-122,-90,-126,60,-98,-73,-88,-87,-19,-36,-116,-3,58,55,-1,-120,-58,12,82,23,-106,32,-117,-25,0,27, 
  /* [29][0][][] */ 54,82,73,-54,-76,24,-127,-3,88,-23,-95,-95,126,-113,-54,-18,-71,97,36,-65,-83,-39,48,9,-6,37,-41,-1,-98,-15,95,-9,59,-3,-73,-64,-11,105,-8,86,45,108,-54,85,-9,96,-63,-28, 
  /* [30][0][][] */ 26,-47,-65,33,-87,20,-69,-17,115,-20,-2,-42,-80,15,59,25,14,35,94,-109,39,-105,-119,9,-93,48,-70,125,-19,-115,-98,4,-64,-78,-115,-59,17,-19,-5,21,93,-73,-15,127,107,-48,104,63, 
  /* [31][0][][] */ 66,-62,22,82,34,49,-70,-106,-42,-29,-85,-94,88,-127,-59,93,-30,-96,24,33,48,21,-41,87,34,-118,62,25,-82,-80,34,89,45,8,-98,-19,80,-41,-75,-113,45,-80,-42,28,-5,-59,-36,18, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,48 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0021922937594354153, 0.0024983622133731842, 0.00246058264747262, 0.0023930806200951338, 0.0023449030704796314, 0.0022847626823931932, 0.0024212950374931097, 0.0024969724472612143, 0.0021615060977637768, 0.0023012717720121145, 0.0025843968614935875, 0.0024520575534552336, 0.0023559972178190947, 0.002577480161562562, 0.0023345074150711298, 0.0023340554907917976, 0.0024550787638872862, 0.0024040557909756899, 0.0022978102788329124, 0.0023311031982302666, 0.0022749882191419601, 0.0023104087449610233, 0.002297060564160347, 0.0024834703654050827, 0.0024814652279019356, 0.00227972655557096, 0.0025816960260272026, 0.0022966880351305008, 0.0024007984902709723, 0.002295720623806119, 0.0022276663221418858, 0.0024519786238670349, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[48] = { 2360, -1442, 4924, 2675, 4542, -125, 2844, 4227, -2523, -1892, -1415, 12421, 4664, 4099, 6509, -5803, -3013, 8752, 2819, 5561, 5014, 31367, 22293, 1003, -2122, 2126, -679, -942, 2855, 2387, 6675, 8226, -1151, 489, 9969, 4868, 9350, 2603, 1755, -2370, 3890, -2438, 12102, -393, 194, 2428, -2063, 5197, };
const TfArray<1, int> tensor_dimension6 = { 1, { 48 } };
const TfArray<48, float> quant6_scale = { 48, { 0.00016409637464676052, 0.00021851218480151147, 0.00014442321844398975, 0.00021811314218211919, 0.00011956314847338945, 0.00019139597134198993, 0.00013187265722081065, 0.00018036650726571679, 0.0001635006774449721, 0.00020041174138896167, 0.00022974878083914518, 6.4604901126585901e-05, 0.00014520552940666676, 0.00013517301704268903, 0.00014028817531652749, 0.00010238962568109855, 0.00018047646153718233, 0.00010643415589584038, 0.00020891477470286191, 0.00014568225014954805, 0.000155197674757801, 3.5059703805018216e-05, 4.5757606130791828e-05, 0.00016662168491166085, 0.00019860832253471017, 0.00013044349907431751, 0.00013666725135408342, 0.00019015755970031023, 0.0001655945525271818, 0.00018947439093608409, 0.00010485114762559533, 0.00010287834447808564, 0.00015808665193617344, 0.0002219007583335042, 8.7381951743736863e-05, 0.00013050025154370815, 8.7257853010669351e-05, 0.00023766544472891837, 0.00022091406572144479, 0.00017163292795885354, 0.00013830397801939398, 0.00018143201305065304, 7.592060137540102e-05, 0.00022887796512804925, 0.00021676113829016685, 0.00020367628894746304, 0.00020487634174060076, 0.00013600736565422267, } };
const TfArray<48, int> quant6_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data7[48*1*1*8] = { 
  /* [0][0][][] */ -9,21,127,-11,-12,49,3,-97, 
  /* [1][0][][] */ 82,-65,62,-80,-7,-67,127,24, 
  /* [2][0][][] */ 69,58,89,-86,-64,33,127,-21, 
  /* [3][0][][] */ 5,32,-3,-13,11,-65,127,-1, 
  /* [4][0][][] */ 127,-35,-66,-29,-101,-69,-17,65, 
  /* [5][0][][] */ 21,65,127,-8,25,-39,22,-39, 
  /* [6][0][][] */ 100,111,-23,127,-79,26,20,83, 
  /* [7][0][][] */ -24,-3,-7,40,35,-119,-127,-42, 
  /* [8][0][][] */ 110,83,-50,93,-74,22,-127,-59, 
  /* [9][0][][] */ 127,-25,-34,39,4,-42,21,-74, 
  /* [10][0][][] */ 72,26,-8,14,-29,127,40,12, 
  /* [11][0][][] */ 127,-14,-20,-107,91,-68,-53,68, 
  /* [12][0][][] */ -59,123,82,-33,8,69,-88,127, 
  /* [13][0][][] */ 127,-9,-103,5,38,-81,22,-90, 
  /* [14][0][][] */ 100,36,-7,-12,-127,22,-68,-20, 
  /* [15][0][][] */ 22,1,-97,-46,-127,-43,109,120, 
  /* [16][0][][] */ 7,-40,101,5,127,-46,-67,-34, 
  /* [17][0][][] */ 16,-25,91,-18,127,-58,-69,4, 
  /* [18][0][][] */ 107,-45,127,44,-21,35,-42,4, 
  /* [19][0][][] */ 66,54,44,-55,-47,-127,27,-51, 
  /* [20][0][][] */ 50,-36,58,127,6,-65,-75,83, 
  /* [21][0][][] */ 100,-7,-82,-127,63,-66,2,106, 
  /* [22][0][][] */ -55,-111,-75,-44,39,-44,127,-85, 
  /* [23][0][][] */ -16,15,35,-50,-105,-127,0,-21, 
  /* [24][0][][] */ 127,0,55,43,-4,-28,-104,79, 
  /* [25][0][][] */ 106,56,-10,-82,-19,-11,-42,127, 
  /* [26][0][][] */ -84,-34,19,-127,114,7,-49,-92, 
  /* [27][0][][] */ 99,127,-12,-44,5,53,33,-1, 
  /* [28][0][][] */ 12,127,-17,22,-8,-60,1,95, 
  /* [29][0][][] */ 110,37,88,127,39,-50,-116,46, 
  /* [30][0][][] */ 127,-97,-86,114,43,-2,-63,81, 
  /* [31][0][][] */ 90,-85,29,43,-72,-95,-127,61, 
  /* [32][0][][] */ -89,-65,30,-127,68,-26,-32,-71, 
  /* [33][0][][] */ 27,12,26,33,22,-70,127,38, 
  /* [34][0][][] */ -63,72,85,-71,127,-66,-83,103, 
  /* [35][0][][] */ -57,31,8,127,3,121,33,-29, 
  /* [36][0][][] */ 82,24,-26,-127,46,-5,19,48, 
  /* [37][0][][] */ 42,54,-15,15,-84,127,71,40, 
  /* [38][0][][] */ -21,-63,18,125,26,56,6,127, 
  /* [39][0][][] */ 20,0,-127,37,-11,-42,-24,74, 
  /* [40][0][][] */ 51,7,-76,-5,-42,53,-55,127, 
  /* [41][0][][] */ 30,9,12,-39,-109,-127,-7,-7, 
  /* [42][0][][] */ -80,60,-95,114,-7,91,-35,-127, 
  /* [43][0][][] */ -9,0,-31,-127,-19,8,-12,-77, 
  /* [44][0][][] */ 64,16,29,56,30,127,-54,40, 
  /* [45][0][][] */ 5,70,-19,12,127,-28,-76,-7, 
  /* [46][0][][] */ 55,-64,-2,127,76,19,-44,75, 
  /* [47][0][][] */ -23,-97,56,-23,127,15,44,36, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant7_scale = { 48, { 0.0024667007382959127, 0.0032846804242581129, 0.0021709732245653868, 0.0032786820083856583, 0.0017972761997953057, 0.0028770689386874437, 0.0019823128823190928, 0.002711273729801178, 0.0024577460717409849, 0.0030125940684229136, 0.0034535892773419619, 0.00097114249365404248, 0.0021827330347150564, 0.002031923970207572, 0.0021088153589516878, 0.0015391233609989285, 0.0027129265945404768, 0.0015999207971617579, 0.003140412038192153, 0.0021898990962654352, 0.0023329351097345352, 0.00052701833192259073, 0.00068782945163547993, 0.002504661213606596, 0.0029854851309210062, 0.0019608298316597939, 0.0020543853752315044, 0.0028584529645740986, 0.0024892212823033333, 0.002848183736205101, 0.0015761250397190452, 0.0015464697498828173, 0.0023763624485582113, 0.0033356174826622009, 0.0013135275803506374, 0.0019616829231381416, 0.0013116621412336826, 0.0035725927446037531, 0.0033207857050001621, 0.0025799903087317944, 0.0020789888221770525, 0.0027272903826087713, 0.0011412403546273708, 0.003440499072894454, 0.0032583586871623993, 0.003061666851863265, 0.0030797061044722795, 0.0020444660913199186, } };
const TfArray<48, int> quant7_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data8[8] = { -11046, -3223, -286, -11105, 1505, -1539, 11650, 10288, };
const TfArray<1, int> tensor_dimension8 = { 1, { 8 } };
const TfArray<8, float> quant8_scale = { 8, { 0.0001266011968255043, 0.00021249442943371832, 7.5838186603505164e-05, 0.00012603861978277564, 0.00010753209789982066, 0.00015919377619866282, 8.1081765529233962e-05, 0.00012464623432606459, } };
const TfArray<8, int> quant8_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data9[8*1*1*48] = { 
  /* [0][0][][] */ 127,-21,26,-25,29,60,2,36,117,-83,56,3,-49,61,15,-43,18,-31,-30,-13,16,-67,11,-22,-50,-38,-43,-42,-28,72,-27,32,23,-42,8,-38,70,-67,-63,7,23,-17,-70,-7,59,-33,65,-41, 
  /* [1][0][][] */ 43,3,-7,66,50,64,15,35,72,-81,-8,-2,36,18,-40,-8,-34,-47,-69,0,10,-45,43,74,2,-63,-8,36,-20,49,-51,127,-31,45,-26,-27,-63,-9,-15,-20,-53,-17,-32,39,19,-9,9,-91, 
  /* [2][0][][] */ -40,-17,-79,36,-70,-24,-4,46,-93,-89,-90,-32,-36,42,-127,1,70,-83,37,-12,110,78,-34,-5,52,85,13,-96,-42,8,58,11,-26,39,69,-65,68,3,85,95,-47,98,50,-10,-81,56,-35,62, 
  /* [3][0][][] */ -1,-15,-7,45,-18,11,-18,42,80,90,-127,-30,18,-29,-28,87,-51,-17,-5,45,-18,-5,78,16,14,5,-54,59,-33,19,-44,-33,8,25,27,11,58,-13,39,4,-53,92,74,18,29,-17,-25,-35, 
  /* [4][0][][] */ -18,-77,14,-53,6,82,-50,-62,-6,-39,79,43,-51,-15,-8,18,59,20,-25,36,-78,-24,117,-13,-98,-9,0,20,22,-15,-16,67,-43,43,-15,55,-27,32,2,15,-28,32,-41,47,127,61,-13,12, 
  /* [5][0][][] */ -65,-70,56,-127,-27,17,-32,-51,-6,72,-51,72,-80,23,53,7,69,54,68,10,26,3,-21,-60,37,-72,5,-45,-14,-34,39,-74,-6,-39,55,-3,-24,31,34,61,96,12,13,-21,-10,-5,-29,36, 
  /* [6][0][][] */ -67,-57,49,33,-60,-58,-2,-68,-97,10,-126,33,21,-52,53,15,-31,16,24,127,-22,-8,73,41,-73,-14,60,11,24,-40,-27,-70,-28,60,61,-100,-45,85,55,-23,-75,63,78,-69,-4,-53,-35,-2, 
  /* [7][0][][] */ 18,3,20,-8,12,32,-51,-50,-127,-37,97,20,2,-34,25,11,22,40,1,-20,-42,7,-12,-47,44,1,-45,8,-7,-28,-30,-56,-112,-56,-42,-1,58,-30,-31,6,53,8,52,-24,15,-48,48,13, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant9_scale = { 8, { 0.0054707648232579231, 0.0091824326664209366, 0.0032771637197583914, 0.005446454044431448, 0.0046467394568026066, 0.0068791741505265236, 0.0035037524066865444, 0.0053862854838371277, } };
const TfArray<8, int> quant9_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data10[48] = { -1127, -758, 12038, 1104, -985, -6485, -3323, 13240, 7829, -3330, -3800, -6598, -1027, 16938, 10473, 620, 8179, -6359, 5110, -1869, 16079, -3386, -1401, -1599, 4244, -5513, -124, -2929, 10283, -28439, -3042, 292, -3107, -1736, -1573, -1688, 10457, -6310, 981, -13817, -3223, 6881, -6623, -1260, 3181, -1872, 8934, -3483, };
const TfArray<1, int> tensor_dimension10 = { 1, { 48 } };
const TfArray<48, float> quant10_scale = { 48, { 0.00020699379092548043, 0.00015879442798905075, 9.4290669949259609e-05, 9.6923795354086906e-05, 0.00017537313397042453, 0.00012124057684559375, 0.0001767434150679037, 0.00012051156954839826, 0.00014389677380677313, 0.00040275242645293474, 0.00022530600836034864, 6.9554618676193058e-05, 0.00020228886569384485, 7.6200172770768404e-05, 0.00011711463594110683, 0.00013251067139208317, 9.9163597042206675e-05, 0.00011073402856709436, 0.00011662718316074461, 0.00022450812684837729, 8.6940002802293748e-05, 0.00019740780408028513, 0.00018632702995091677, 0.00016591699386481196, 0.00015454283857252449, 0.00023721417528577149, 0.00019650267495308071, 0.00029566485318355262, 8.0218640505336225e-05, 8.5009291069582105e-05, 0.00018188680405728519, 0.00013793840480502695, 9.9198994575999677e-05, 0.00024490436771884561, 0.00010216185910394415, 0.00015580201579723507, 0.00013553362805396318, 7.8926059359218925e-05, 7.7989287092350423e-05, 8.2093683886341751e-05, 0.0001719741994747892, 0.00011407594865886495, 0.00018087844364345074, 0.00013504804519470781, 0.00012194181181257591, 7.8234479587990791e-05, 0.00015573002747260034, 0.00017121800919994712, } };
const TfArray<48, int> quant10_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data11[1*3*3*48] = { 
  /* [0][0][][] */ 70,84,-17,64,6,3,-40,17,38,-86,29,5,20,-105,-23,45,127,44,-76,-2,88,25,-17,-15,71,24,15,-6,-81,22,-15,-55,127,15,104,23,-34,28,127,47,-74,71,-107,-52,32,-99,-30,-8, 89,127,-79,105,26,54,-62,-127,54,50,127,35,-26,-32,-18,-3,-61,127,-95,29,58,127,36,-19,27,5,4,127,-127,109,-31,-127,-2,-31,12,99,-90,127,111,34,-127,-77,77,-5,13,11,-127,92, 44,51,-18,45,11,0,-25,27,27,-111,33,23,13,-73,-20,-20,115,-4,-39,-16,83,23,-29,48,53,71,11,-9,-19,28,-20,-38,123,18,92,10,-22,32,107,10,-45,83,57,63,36,76,25,-22, 
  /* [0][1][][] */ -21,-45,-124,99,25,56,71,-24,37,70,-43,127,127,-1,-24,-84,-26,86,71,-21,-108,24,31,-118,22,67,24,8,-11,87,20,56,46,127,43,30,-92,9,-61,79,85,6,81,-103,9,-107,-14,127, 52,-80,-28,-127,127,7,127,-84,-127,127,6,80,-121,127,127,-25,-127,79,5,127,53,-15,127,-5,-127,127,39,-80,-107,41,-127,110,78,-108,25,127,127,80,-21,127,127,-70,-32,-4,102,-67,-6,29, -16,-39,-127,61,-9,127,55,-17,31,50,-37,81,-25,20,-30,-20,-72,102,127,-45,-127,14,-68,127,11,39,31,30,50,80,39,39,15,-3,-26,-108,-47,-19,-10,41,48,75,-16,127,-12,102,-35,96, 
  /* [0][2][][] */ -40,-12,-5,32,-7,17,-2,8,35,-44,-4,6,34,-95,-48,29,116,13,7,1,-65,35,-8,-3,22,10,-9,8,-10,2,36,11,20,16,127,-4,-19,85,84,33,5,71,127,-30,-49,-127,-10,-3, -127,3,-86,54,-120,6,-52,-6,25,111,-87,56,-26,-33,-26,127,-91,50,-105,-39,-73,17,-3,-29,-15,68,-127,-18,-91,127,60,27,30,-25,6,14,-33,72,-47,75,-76,-127,-117,-34,-127,52,-110,116, -37,-18,-18,19,10,0,1,3,22,-81,-19,-8,-10,-74,-30,2,115,-44,91,14,-69,2,0,36,19,3,-13,-2,5,3,37,11,47,9,64,18,-10,71,108,-5,14,71,-49,42,-33,86,-12,-34, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant11_scale = { 48, { 0.011213489808142185, 0.0086023816838860512, 0.0051080151461064816, 0.0052506597712635994, 0.0095005016773939133, 0.0065679745748639107, 0.0095747336745262146, 0.0065284818410873413, 0.007795330137014389, 0.021818336099386215, 0.012205518782138824, 0.003767987247556448, 0.01095860917121172, 0.0041279974393546581, 0.0063444594852626324, 0.0071785105392336845, 0.0053719966672360897, 0.0059988023713231087, 0.0063180527649819851, 0.012162295170128345, 0.0047098072245717049, 0.010694187134504318, 0.010093907825648785, 0.008988233283162117, 0.0083720600232481956, 0.012850620783865452, 0.010645153932273388, 0.016017073765397072, 0.0043456903658807278, 0.0046052145771682262, 0.0098533667623996735, 0.0074725472368299961, 0.005373914260417223, 0.013267222791910172, 0.0055344216525554657, 0.0084402738139033318, 0.0073422733694314957, 0.0042756670154631138, 0.0042249192483723164, 0.0044472669251263142, 0.0093163708224892616, 0.0061798444949090481, 0.0097987409681081772, 0.0073159672319889069, 0.0066059627570211887, 0.0042382022365927696, 0.0084363743662834167, 0.0092754056677222252, } };
const TfArray<48, int> quant11_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data12[48] = { 61801, 9326, 1796, 1778, 6388, 3182, 7899, 5662, 4914, -6932, 16341, 1527, 11497, 2804, 6019, 2263, 9004, -1041, 12068, 397, 4283, -554, 4791, 8451, 3129, -5527, 3435, 15013, 842, 8716, 2857, 13797, 712, 6711, -495, -2178, 3167, 2983, 251, 2235, 17263, -1436, 17957, 4485, 1739, 7617, 5370, -2465, };
const TfArray<1, int> tensor_dimension12 = { 1, { 48 } };
const TfArray<48, float> quant12_scale = { 48, { 1.797556433302816e-05, 8.4091603639535606e-05, 0.00015148248348850757, 0.00013621491962112486, 0.00011210892989765853, 0.000136276546982117, 9.55087089096196e-05, 0.00011565442400751635, 9.81395278358832e-05, 0.00010337721323594451, 6.2085848185233772e-05, 0.00015136961883399636, 7.1658636443316936e-05, 0.00012953854457009584, 0.00011174859537277371, 0.00014939543325453997, 8.0951002018991858e-05, 0.00016439477622043341, 7.4929033871740103e-05, 0.00012539590534288436, 0.00014719765749759972, 0.0001201690683956258, 0.00012194338341942057, 8.837793575366959e-05, 0.00014317948080133647, 0.00011364388046786189, 0.00013461161870509386, 6.2210383475758135e-05, 0.00018043541058432311, 9.2952432169113308e-05, 0.00012079921725671738, 6.8163208197802305e-05, 0.00012071517994627357, 0.00011820803774753585, 0.00012123033957323059, 0.00017659000877756625, 0.00016819564916659147, 0.0001206138331326656, 0.00017943273996934295, 0.00013060180936008692, 5.4313175496645272e-05, 0.00014507595915347338, 4.7280438593588769e-05, 9.8555407021194696e-05, 0.00013549458526540548, 0.00010600502719171345, 0.00011438637011451647, 0.00014069864118937403, } };
const TfArray<48, int> quant12_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data13[48*1*1*8] = { 
  /* [0][0][][] */ -127,48,-19,-23,72,47,1,-59, 
  /* [1][0][][] */ 5,-65,-44,-22,-51,-127,14,25, 
  /* [2][0][][] */ -77,64,-1,-50,-54,39,-62,127, 
  /* [3][0][][] */ 48,36,45,-14,-53,-127,42,-15, 
  /* [4][0][][] */ 24,59,-127,25,-117,93,38,38, 
  /* [5][0][][] */ -29,52,28,-30,-93,-127,-59,-9, 
  /* [6][0][][] */ -73,127,120,-50,-70,-26,28,-36, 
  /* [7][0][][] */ -15,-6,45,62,6,-127,-8,64, 
  /* [8][0][][] */ 127,17,-77,85,-97,-72,-112,0, 
  /* [9][0][][] */ 101,-34,-57,-64,-2,-29,-43,127, 
  /* [10][0][][] */ -84,-5,1,127,11,75,23,-97, 
  /* [11][0][][] */ 29,21,60,-24,19,127,117,92, 
  /* [12][0][][] */ -67,-78,-53,-77,127,-23,-10,44, 
  /* [13][0][][] */ -37,-10,-10,48,28,-127,53,73, 
  /* [14][0][][] */ 70,68,117,23,68,-127,-88,-24, 
  /* [15][0][][] */ -46,71,127,52,-4,30,36,-59, 
  /* [16][0][][] */ -77,-34,31,-69,127,18,-47,-8, 
  /* [17][0][][] */ 39,-46,-43,-2,-12,127,-27,47, 
  /* [18][0][][] */ -18,127,68,-55,-68,47,93,-97, 
  /* [19][0][][] */ 25,120,91,127,-25,36,33,29, 
  /* [20][0][][] */ 12,3,60,-127,-49,4,59,-9, 
  /* [21][0][][] */ -110,62,43,-125,99,54,127,20, 
  /* [22][0][][] */ 89,-24,-107,80,62,-53,-69,127, 
  /* [23][0][][] */ 31,-87,-127,-44,54,-18,-60,98, 
  /* [24][0][][] */ 51,-11,-107,18,-62,36,-127,113, 
  /* [25][0][][] */ -10,-13,49,19,127,-10,-76,-45, 
  /* [26][0][][] */ 7,116,127,-20,-28,-22,61,-80, 
  /* [27][0][][] */ -42,32,127,-88,9,7,101,-113, 
  /* [28][0][][] */ 62,-5,74,127,60,-37,41,82, 
  /* [29][0][][] */ 77,74,107,21,-65,31,-127,97, 
  /* [30][0][][] */ 48,-10,-86,54,-127,-29,-45,48, 
  /* [31][0][][] */ 13,127,106,-58,-60,45,102,-122, 
  /* [32][0][][] */ 74,-22,-5,21,105,127,42,-27, 
  /* [33][0][][] */ 12,-41,-127,1,23,-17,-36,80, 
  /* [34][0][][] */ 28,-54,24,-127,-4,71,-17,11, 
  /* [35][0][][] */ -28,20,93,-11,18,-127,3,-16, 
  /* [36][0][][] */ -1,15,-38,-127,-8,11,8,-48, 
  /* [37][0][][] */ 56,-19,-15,-91,-73,127,-63,-68, 
  /* [38][0][][] */ 77,-63,-20,93,67,35,-35,127, 
  /* [39][0][][] */ 127,90,39,69,-3,105,-52,2, 
  /* [40][0][][] */ 38,-114,-127,-29,5,8,-52,116, 
  /* [41][0][][] */ -15,-64,-127,-105,-3,-85,-46,-12, 
  /* [42][0][][] */ 68,108,91,127,-88,-49,33,50, 
  /* [43][0][][] */ 120,-40,-125,-127,-66,-54,34,83, 
  /* [44][0][][] */ 2,77,109,-86,-96,-10,81,-127, 
  /* [45][0][][] */ 49,29,-127,58,-44,30,21,59, 
  /* [46][0][][] */ 39,-44,-64,-127,25,-28,-39,48, 
  /* [47][0][][] */ 79,-107,127,-55,64,-24,9,14, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant13_scale = { 48, { 0.00037878076545894146, 0.0017719768220558763, 0.0031920361798256636, 0.0028703184798359871, 0.0023623574525117874, 0.0028716169763356447, 0.0020125578157603741, 0.0024370679166167974, 0.0020679943263530731, 0.0021783628035336733, 0.0013082718942314386, 0.0031896580476313829, 0.0015099894953891635, 0.0027296340558677912, 0.0023547643795609474, 0.0031480579636991024, 0.0017057980876415968, 0.0034641239326447248, 0.001578903291374445, 0.0026423402596265078, 0.0031017465516924858, 0.0025322004221379757, 0.0025695888325572014, 0.0018622983479872346, 0.0030170755926519632, 0.0023947018198668957, 0.0028365335892885923, 0.0013108961284160614, 0.003802131861448288, 0.001958691980689764, 0.0025454789865761995, 0.0014363338705152273, 0.0025437080767005682, 0.0024908776395022869, 0.0025545635726302862, 0.0037211014423519373, 0.0035442158114165068, 0.0025415725540369749, 0.0037810036446899176, 0.0027520388830453157, 0.0011444862466305494, 0.0030570381786674261, 0.00099629256874322891, 0.0020767578389495611, 0.0028551395516842604, 0.0022337359841912985, 0.0024103475734591484, 0.0029647992923855782, } };
const TfArray<48, int> quant13_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data14[8] = { -13674, -37665, 1064, 8417, -19492, 927, -29294, -785, };
const TfArray<1, int> tensor_dimension14 = { 1, { 8 } };
const TfArray<8, float> quant14_scale = { 8, { 0.00014553520304616541, 5.4193642426980659e-05, 4.6079268940957263e-05, 5.6190303439507261e-05, 6.5323692979291081e-05, 6.914063123986125e-05, 5.4825210099807009e-05, 7.2891365562099963e-05, } };
const TfArray<8, int> quant14_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data15[8*1*1*48] = { 
  /* [0][0][][] */ 42,42,-80,49,11,25,-85,-33,11,-15,-4,-41,-16,0,42,2,47,-22,43,-27,19,-37,44,0,11,-22,-23,15,-15,0,-19,-4,51,23,20,9,127,56,35,-30,-1,-19,-8,-22,73,26,17,-50, 
  /* [1][0][][] */ 70,23,16,-8,27,90,-14,-28,38,66,-39,-76,110,-24,9,43,25,35,21,-88,127,-31,36,56,42,20,32,13,30,-56,52,67,65,100,5,109,59,23,29,23,76,19,29,25,26,38,105,-73, 
  /* [2][0][][] */ -27,14,78,127,-49,27,-3,66,37,72,29,-78,-34,117,26,48,-75,-99,81,12,-2,57,-58,-75,-23,-39,30,-1,-109,28,6,-10,-37,-32,-90,-48,16,23,-91,-22,-30,-51,-34,20,66,-78,-27,33, 
  /* [3][0][][] */ -31,42,-72,-6,20,-70,11,61,107,-72,-46,7,-4,-21,5,54,27,2,-19,-20,-10,14,-75,40,-25,-35,29,-15,59,-26,35,-45,41,-20,-34,-53,-127,-7,-71,11,-31,-52,30,-9,-57,8,-15,-36, 
  /* [4][0][][] */ 44,-19,26,-22,-58,62,19,75,-127,-57,62,45,77,-48,-61,-55,83,64,69,-29,9,-87,-13,51,-23,11,-39,-113,-49,-61,101,38,73,3,115,92,71,73,49,37,19,34,-44,-30,77,77,93,-43, 
  /* [5][0][][] */ 33,78,22,87,20,32,-50,-92,-100,27,-12,4,20,65,37,-69,72,106,-23,24,-7,-67,-23,-75,-96,-73,-36,55,0,41,-28,41,-5,-79,69,10,-34,127,-38,-107,-9,-39,-17,-38,3,-11,-37,96, 
  /* [6][0][][] */ 111,45,-8,127,-100,33,14,61,26,-81,72,88,92,-48,-35,-59,68,20,-74,27,77,-35,-36,-8,7,63,-49,-46,22,-39,68,51,28,-52,-2,87,104,-79,11,6,-92,73,-114,62,63,103,106,-50, 
  /* [7][0][][] */ 22,9,127,41,-38,67,-81,4,-32,105,-16,-17,48,55,8,-12,-45,-18,-67,11,-10,29,-1,-38,-14,39,42,-21,1,9,13,-12,-85,-16,58,26,87,-5,42,-18,-28,-36,-38,-57,-4,-36,3,23, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant15_scale = { 8, { 0.0070250201970338821, 0.0026159405242651701, 0.0022242576815187931, 0.0027123198378831148, 0.003153190715238452, 0.0033374354243278503, 0.0026464264374226332, 0.0035184843000024557, } };
const TfArray<8, int> quant15_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data16[48] = { 16640, -25580, -1351, 4326, -762, 14082, 7603, -2982, -14038, 2642, -3446, -3126, -10149, -17452, 6438, 1192, -12568, 38921, -3089, -19304, 18272, -1827, -1271, -75, -1082, -1104, -6393, -587, -1752, 1818, -215, 31404, 19728, -250, 10158, 27118, -740, 25688, 346, -299, -2512, -10667, -1659, 3001, 4939, 40886, 16127, -5406, };
const TfArray<1, int> tensor_dimension16 = { 1, { 48 } };
const TfArray<48, float> quant16_scale = { 48, { 7.255904347402975e-05, 5.3390143875731155e-05, 0.00071224774001166224, 0.00014283052587416023, 0.00012112862896174192, 0.00010347841453040019, 7.4815594416577369e-05, 0.0002823667018674314, 7.3092203820124269e-05, 0.00024651936837472022, 0.00015171089034993201, 0.00010874915460590273, 0.00011495192302390933, 6.36406330158934e-05, 8.9104250946547836e-05, 6.1306869611144066e-05, 6.0326816310407594e-05, 4.7400597395608202e-05, 0.00025283577269874513, 4.056009856867604e-05, 8.2496291724964976e-05, 0.00024581607431173325, 0.00012125363718951121, 0.00010495766764506698, 0.00013834219134878367, 0.00013259146362543106, 0.00012242941011209041, 0.00017801493231672794, 0.00015593164425808936, 0.0001143638655776158, 9.9272467195987701e-05, 5.6138156651286408e-05, 8.1415688327979296e-05, 0.00013292567746248096, 8.0200297816190869e-05, 7.1847025537863374e-05, 0.0003291038447059691, 9.2158938059583306e-05, 6.9645473558921367e-05, 0.00025391264352947474, 9.51133988564834e-05, 0.00010102003579959273, 0.00014344407827593386, 9.9937446066178381e-05, 0.00011709333921317011, 3.9872556953923777e-05, 9.4832052127458155e-05, 0.00012924900511279702, } };
const TfArray<48, int> quant16_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data17[1*3*3*48] = { 
  /* [0][0][][] */ -58,-4,43,11,127,-50,17,11,9,34,44,-4,7,27,-68,18,83,-35,-15,83,-26,18,-37,-5,-25,8,44,-46,-22,127,19,-111,-43,110,114,-88,12,-61,-127,-27,14,-28,-13,-68,-6,-52,-111,15, -66,73,-1,31,-16,-88,97,-14,79,17,38,127,50,127,-2,18,127,-66,10,127,-33,-14,116,-116,-7,54,-98,26,-21,-93,97,-127,-127,-86,16,-48,-62,-50,-109,21,-69,-32,23,-127,23,-127,32,41, -3,7,15,3,38,-29,19,0,19,27,33,-45,-20,17,-74,9,57,-35,-11,75,-15,4,-52,-1,26,7,38,-117,-35,44,-45,-113,13,3,108,-82,16,-32,-89,5,11,-7,6,-56,-16,-58,-127,-26, 
  /* [0][1][][] */ -127,123,-12,-71,15,-75,7,-4,37,22,43,34,85,100,-80,16,127,-127,11,95,-37,-48,-84,-41,-127,-3,-26,8,-4,-6,76,-67,-46,127,-127,-63,34,-76,42,62,-107,32,-79,55,-12,-126,18,-50, 12,127,127,127,-41,86,-127,127,127,-127,-122,63,127,99,127,-121,-38,-81,127,-15,-127,127,127,-7,101,117,81,127,127,-81,127,36,-61,-112,-39,-127,127,127,110,58,-63,127,-21,82,127,20,3,-127, -50,72,-34,-46,-66,-114,7,-20,-10,9,116,45,34,98,-51,111,110,-95,-5,123,32,-81,-97,-38,34,-16,-28,13,-4,14,75,-52,1,-36,-127,-66,24,-81,46,-127,-89,29,127,73,-31,-103,-2,106, 
  /* [0][2][][] */ -24,-30,11,-13,32,-33,15,8,51,30,127,26,13,-25,-52,118,73,-63,-57,8,-29,8,-56,45,-9,-6,-35,-30,6,56,3,-23,-7,36,-62,41,-47,-64,57,-35,90,-17,2,11,-24,-11,13,-35, -41,121,14,18,-88,-127,58,-70,82,26,53,-49,-44,9,-47,127,73,-10,-14,121,-54,14,73,127,19,-127,127,0,19,-53,-32,-119,15,-46,-69,-98,-74,-89,30,40,127,47,-36,48,-31,-111,-74,-1, 23,-30,27,-11,-21,-34,8,10,52,27,115,24,33,-13,-32,61,51,-49,-68,5,-21,2,-53,47,18,-13,-29,-70,1,-10,-6,-7,4,1,-31,53,-38,-50,63,5,42,-8,37,6,-25,-91,28,36, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant17_scale = { 48, { 0.0052140033803880215, 0.0038365498185157776, 0.051181241869926453, 0.010263625532388687, 0.0087041538208723068, 0.0074358307756483555, 0.0053761559538543224, 0.020290521904826164, 0.0052523151971399784, 0.017714576795697212, 0.010901757515966892, 0.0078145796433091164, 0.0082603031769394875, 0.0045731370337307453, 0.0064029213972389698, 0.0044054356403648853, 0.0043350104242563248, 0.0034061484038829803, 0.018168466165661812, 0.0029145986773073673, 0.0059280814602971077, 0.017664039507508278, 0.0087131364271044731, 0.0075421282090246677, 0.0099410992115736008, 0.0095278583467006683, 0.0087976260110735893, 0.012791933491826057, 0.011205054819583893, 0.0082180462777614594, 0.0071335965767502785, 0.0040340186096727848, 0.0058504305779933929, 0.0095518752932548523, 0.0057630944065749645, 0.0051628383807837963, 0.023648995906114578, 0.0066224271431565285, 0.0050046378746628761, 0.018245847895741463, 0.006834731437265873, 0.0072591747157275677, 0.010307714343070984, 0.0071813813410699368, 0.0084141828119754791, 0.0028651927132159472, 0.0068145138211548328, 0.0092876739799976349, } };
const TfArray<48, int> quant17_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data18[48] = { 771, 8604, -10324, 5265, 4444, 7461, 3682, 14639, 13494, 8006, -2973, -101, 1444, 5048, 4816, -1739, -42, 8055, 12817, 763, 3408, 12518, 4114, 8353, 20290, 9823, 2011, 15969, 4370, 7269, -3293, 13317, 2053, 11390, 12181, 7252, 109066, 18541, 6924, 21304, 4870, 1174, 5974, 1731, 5485, 3530, 2787, 5242, };
const TfArray<1, int> tensor_dimension18 = { 1, { 48 } };
const TfArray<48, float> quant18_scale = { 48, { 0.00021811961778439581, 9.1736292233690619e-05, 7.4950497946701944e-05, 0.00011536818783497438, 0.00010956735059153289, 8.3507889939937741e-05, 0.0001291248481720686, 6.0331054555717856e-05, 7.0389527536462992e-05, 8.6910957179497927e-05, 0.00011207637726329267, 0.00014905795978847891, 0.00013891325215809047, 0.00011594670650083572, 0.00011406256089685485, 7.6658543548546731e-05, 0.00015946271014399827, 9.2541449703276157e-05, 6.982748891459778e-05, 0.00012058340507792309, 0.00013750935613643378, 6.3952640630304813e-05, 0.00012913694081362337, 8.3237864600960165e-05, 4.4047614210285246e-05, 8.8017855887301266e-05, 0.00011552138312254101, 5.9612364566419274e-05, 6.5537678892724216e-05, 0.00010609480523271486, 0.00014631901285611093, 6.3922489061951637e-05, 0.00018147213268093765, 7.0719266659580171e-05, 5.8528199588181451e-05, 0.00010499092604732141, 1.4447500689129811e-05, 5.1499657274689525e-05, 8.8597407739143819e-05, 4.6389261115109548e-05, 8.6398787971120328e-05, 0.00016706470341887325, 0.00011416842608014122, 0.00010789489169837907, 0.00011776127939810976, 9.4883464043959975e-05, 0.00013897336611989886, 7.1250433393288404e-05, } };
const TfArray<48, int> quant18_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data19[48*1*1*8] = { 
  /* [0][0][][] */ -84,-127,-37,30,-29,-9,46,-45, 
  /* [1][0][][] */ -15,127,48,-98,11,-89,-83,95, 
  /* [2][0][][] */ -127,-60,41,8,66,5,24,-19, 
  /* [3][0][][] */ 8,-38,-127,-50,40,-41,-36,45, 
  /* [4][0][][] */ -66,-119,107,-38,127,-64,57,3, 
  /* [5][0][][] */ -15,63,46,-96,119,47,-65,127, 
  /* [6][0][][] */ -122,86,52,71,-40,10,32,-127, 
  /* [7][0][][] */ 45,-9,59,29,47,-127,3,103, 
  /* [8][0][][] */ 2,72,-18,-27,14,95,127,-71, 
  /* [9][0][][] */ 85,127,4,-67,-84,-66,-49,105, 
  /* [10][0][][] */ 25,-15,25,-3,-28,39,-127,-71, 
  /* [11][0][][] */ -63,17,-106,-69,127,12,37,57, 
  /* [12][0][][] */ 91,42,-31,-1,127,92,15,1, 
  /* [13][0][][] */ -127,-115,-4,59,-108,44,74,4, 
  /* [14][0][][] */ -8,87,-78,108,-42,127,-19,24, 
  /* [15][0][][] */ -15,-96,-43,-99,127,78,-28,77, 
  /* [16][0][][] */ 58,-84,7,38,39,-8,27,-127, 
  /* [17][0][][] */ -72,-73,-127,101,2,84,76,-91, 
  /* [18][0][][] */ 91,1,117,21,-40,-127,-69,-36, 
  /* [19][0][][] */ -30,127,37,26,111,-121,-80,-38, 
  /* [20][0][][] */ -76,-18,-127,-47,35,-5,-6,3, 
  /* [21][0][][] */ -127,-28,53,51,-96,-99,110,-35, 
  /* [22][0][][] */ 51,2,-127,-78,-40,-15,-2,43, 
  /* [23][0][][] */ -34,29,127,-16,-89,46,-19,-116, 
  /* [24][0][][] */ -86,97,74,118,127,87,3,-42, 
  /* [25][0][][] */ -41,-127,-79,37,-56,28,48,2, 
  /* [26][0][][] */ 107,127,-118,-52,-102,-17,-65,21, 
  /* [27][0][][] */ 66,48,-72,23,-127,27,-33,-22, 
  /* [28][0][][] */ -24,66,20,-75,76,80,-127,-123, 
  /* [29][0][][] */ 51,-7,-7,-79,-127,14,12,-71, 
  /* [30][0][][] */ -85,4,35,127,49,16,-34,-24, 
  /* [31][0][][] */ 16,-109,-10,-73,-127,54,-51,-111, 
  /* [32][0][][] */ -127,4,32,-8,8,-34,1,21, 
  /* [33][0][][] */ 53,-70,-127,-117,-5,14,-56,23, 
  /* [34][0][][] */ 66,96,127,9,-117,-72,80,-71, 
  /* [35][0][][] */ 122,36,10,21,-127,-55,-126,-48, 
  /* [36][0][][] */ 127,18,77,-37,5,-6,60,68, 
  /* [37][0][][] */ 127,111,-19,-3,81,72,-119,31, 
  /* [38][0][][] */ -41,82,96,127,-20,67,20,-86, 
  /* [39][0][][] */ 30,60,127,-40,91,-62,-38,21, 
  /* [40][0][][] */ 67,49,46,2,-77,-127,26,-57, 
  /* [41][0][][] */ 25,-60,27,127,-31,79,0,87, 
  /* [42][0][][] */ -6,-104,72,-38,127,-38,107,37, 
  /* [43][0][][] */ -18,-32,-91,-45,108,47,-75,127, 
  /* [44][0][][] */ 108,-13,127,4,7,40,-52,3, 
  /* [45][0][][] */ -27,28,34,-26,-92,-127,-13,99, 
  /* [46][0][][] */ -60,79,83,30,-1,-16,36,-127, 
  /* [47][0][][] */ 49,-12,19,127,-19,-107,78,53, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant19_scale = { 48, { 0.0061048050411045551, 0.002567546209320426, 0.0020977396052330732, 0.0032289635855704546, 0.0030666077509522438, 0.0023372469004243612, 0.0036139898002147675, 0.0016885658260434866, 0.0019700857810676098, 0.0024324930272996426, 0.0031368313357234001, 0.0041718841530382633, 0.0038879506755620241, 0.0032451553270220757, 0.0031924212817102671, 0.0021455450914800167, 0.0044630956836044788, 0.0025900811888277531, 0.001954355277121067, 0.0033749288413673639, 0.0038486581761389971, 0.0017899279482662678, 0.0036143278703093529, 0.0023296892177313566, 0.0012328193988651037, 0.0024634732399135828, 0.0032332511618733406, 0.0016684508882462978, 0.0018342905677855015, 0.0029694170225411654, 0.0040952255949378014, 0.0017890841700136662, 0.0050791031681001186, 0.0019793144892901182, 0.0016381068853661418, 0.0029385213274508715, 0.00040436148992739618, 0.0014413896715268493, 0.0024796940851956606, 0.0012983581982553005, 0.0024181583430618048, 0.0046758628450334072, 0.0031953842844814062, 0.0030197985470294952, 0.0032959422096610069, 0.0026556302327662706, 0.0038896333426237106, 0.0019941809587180614, } };
const TfArray<48, int> quant19_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data20[8] = { 4629, -2241, 17263, -10167, -15989, -17760, -9323, -1673, };
const TfArray<1, int> tensor_dimension20 = { 1, { 8 } };
const TfArray<8, float> quant20_scale = { 8, { 7.8581899288110435e-05, 0.00010050084529211745, 8.8245287770405412e-05, 0.00010325537004973739, 0.00010349605872761458, 7.7233089541550726e-05, 0.00015522369358222932, 0.00014702802582178265, } };
const TfArray<8, int> quant20_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data21[8*1*1*48] = { 
  /* [0][0][][] */ -24,-27,53,-52,52,92,67,102,113,-50,-24,57,-33,-20,11,-13,47,46,12,-49,-26,19,-84,-41,27,-13,26,-77,-37,23,39,29,31,43,60,11,124,-61,-72,6,-53,-73,-34,-3,-79,-91,-127,64, 
  /* [1][0][][] */ -13,-3,-38,46,1,17,-40,-14,-61,26,16,91,-29,3,-28,127,42,58,12,-34,-40,-20,-73,23,16,-11,-12,-87,50,-11,-55,-71,64,-33,-32,-54,35,31,48,-46,5,67,50,-41,-3,-37,-57,-19, 
  /* [2][0][][] */ 0,-73,-25,-10,-36,14,7,14,106,20,-1,-13,-30,-76,31,9,0,-60,-25,-4,-104,54,7,27,7,48,-35,-23,-18,-40,40,-46,-98,30,-50,54,-66,59,-17,-24,127,-15,-1,40,25,37,-61,-34, 
  /* [3][0][][] */ -34,-112,103,60,18,-109,-14,-12,-127,124,55,-51,58,15,-28,21,60,36,-28,45,81,82,27,-62,14,82,68,35,-26,-69,14,13,-22,6,58,10,-13,-91,-41,38,-28,-17,19,-69,-87,16,-2,33, 
  /* [4][0][][] */ -7,56,-19,69,34,-1,14,-5,-47,73,46,76,3,20,61,9,2,-98,-7,-12,82,-9,-91,61,73,-17,25,33,45,24,-15,-56,-55,127,6,10,52,-20,24,27,-25,46,1,-19,6,-44,-26,14, 
  /* [5][0][][] */ -21,4,-12,-69,-121,29,116,29,19,57,-28,-35,-100,-9,67,-37,-87,37,-54,-86,4,102,-9,41,113,31,-5,15,-30,-18,127,-59,-18,97,79,96,-26,56,90,41,-20,-41,-26,38,-57,57,34,54, 
  /* [6][0][][] */ -2,-26,-8,25,-52,-51,14,1,20,-10,38,9,-53,-26,32,56,7,-59,6,-62,74,-24,-3,-33,8,-5,13,38,43,2,12,127,47,-14,-14,25,6,-12,18,11,-2,34,-28,-51,-4,-28,-25,41, 
  /* [7][0][][] */ -30,-20,-41,-4,6,-23,2,12,38,7,20,-4,-10,11,-1,3,35,-4,-2,-3,-62,7,13,-30,-3,-9,-57,-15,-12,-20,18,34,22,-13,27,14,-18,127,-16,-44,-43,-5,-49,-38,24,63,-75,-9, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant21_scale = { 8, { 0.0042503699660301208, 0.0054359310306608677, 0.004773047287017107, 0.0055849188938736916, 0.005597937386482954, 0.0041774152778089046, 0.0083958031609654427, 0.0079525122418999672, } };
const TfArray<8, int> quant21_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data22[48] = { -507, 46077, 48139, -3015, -961, -19185, 34149, 29313, -20788, 4577, -3146, 26379, 36627, -24181, -17184, -3259, -926, 49300, -1502, -1877, 74720, 18552, -15169, -12441, 26693, 18919, -5374, -2441, -7087, -484, 48388, -19, -6980, 19147, 20924, 22512, -3997, 74213, -7447, -1667, 43485, -94, -6354, 28791, 367, -2082, -10820, 24244, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 0.00018815406656358391, 6.1929655203130096e-05, 5.6539116485510021e-05, 6.056814527255483e-05, 4.0085429645841941e-05, 7.9607038060203195e-05, 6.862013106001541e-05, 6.1777544033247977e-05, 0.00013671268243342638, 3.7618458009092137e-05, 7.9603414633311331e-05, 6.1563303461298347e-05, 5.1391292799962685e-05, 0.00014089321484789252, 5.6530050642322749e-05, 4.5428605517372489e-05, 5.2999552281107754e-05, 8.9992659923154861e-05, 0.00026771824923343956, 4.6491491957567632e-05, 3.3556658308953047e-05, 5.6509783462388441e-05, 5.4564690799452364e-05, 8.3058628661092371e-05, 5.5301206884905696e-05, 6.2043873185757548e-05, 0.00010616097279125825, 0.00012087274080840871, 8.0104735388886184e-05, 0.00016929258708842099, 8.4944666014052927e-05, 4.8149962822208181e-05, 3.9794329495634884e-05, 6.0472240875242278e-05, 5.6865588703658432e-05, 5.3716168622486293e-05, 5.2300816605566069e-05, 4.8868692829273641e-05, 6.277432112256065e-05, 6.5709980844985694e-05, 8.6919608293101192e-05, 0.00013199463137425482, 5.3180832765065134e-05, 4.8255929868901148e-05, 0.00011566418106667697, 0.00010868143726838753, 0.00014276862202677876, 8.1677091657184064e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 56,-50,-34,50,99,28,-59,-102,3,47,107,-75,-60,69,93,48,74,-92,58,95,-88,-68,50,110,-44,-8,79,85,94,110,-49,79,59,-90,-89,-48,67,-59,60,21,-84,36,49,-117,80,116,49,-74, 95,-73,-72,86,101,40,-64,-127,20,65,102,-103,-88,85,121,72,70,-116,53,114,-75,-120,70,119,-82,-42,105,93,121,127,-78,101,73,-86,-127,-79,91,-85,74,43,-107,50,52,-98,107,127,62,-79, 43,-36,-62,36,46,-4,-10,-41,10,18,6,-23,-87,29,39,15,20,-30,34,18,-16,-70,30,51,-34,-8,53,31,42,26,-14,23,29,-51,-63,-30,28,-35,18,32,-37,-4,2,-34,27,25,10,-50, 
  /* [0][1][][] */ 42,-104,-78,85,103,80,-117,-95,83,83,112,-87,-124,105,127,84,100,-109,44,125,-107,-107,75,123,-127,-70,109,84,94,68,-79,95,84,-127,-112,-127,89,-112,114,84,-104,111,94,-121,77,117,36,-80, 53,-127,-127,127,127,127,-127,-126,127,127,127,-127,-127,127,116,127,127,-127,45,127,-127,-127,127,127,-110,-127,127,127,127,92,-127,127,127,-120,-98,-123,127,-127,127,127,-127,127,127,-127,127,114,43,-127, -11,-81,-88,66,58,27,-49,-38,59,42,19,-47,-88,33,70,68,27,-38,34,20,-39,-84,58,73,-79,-16,23,57,67,2,-32,38,64,-109,-68,-48,51,-35,23,59,-27,27,37,-71,45,-5,18,-76, 
  /* [0][2][][] */ -44,-66,-67,42,29,43,-69,-18,-104,45,33,-45,-82,39,65,58,75,-18,-77,55,-33,-32,42,49,-68,-58,56,49,23,21,-59,39,54,-84,-35,-49,14,-52,36,69,-44,60,71,-97,47,20,-105,-45, -127,-92,-101,73,56,70,-82,-29,-80,56,53,-49,-87,41,53,70,74,-27,-127,81,-46,-79,73,33,-82,-49,47,46,33,10,-86,44,71,-110,-22,-58,29,-60,35,92,-30,55,105,-95,47,-21,-127,-88, -57,-31,-74,47,14,15,-13,-1,-96,20,21,-20,-32,15,14,48,24,0,-45,29,-35,-20,33,26,-55,0,12,13,17,-22,-30,20,34,-56,-7,0,-2,-5,-8,45,-2,2,31,-39,16,-8,-60,-46, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.013240745291113853, 0.0043581030331552029, 0.0039787609130144119, 0.004262290894985199, 0.0028208848088979721, 0.005602092482149601, 0.0048289238475263119, 0.0043473984114825726, 0.0096207214519381523, 0.0026472795289009809, 0.0056018377654254436, 0.0043323221616446972, 0.0036164990160614252, 0.0099149122834205627, 0.0039781229570508003, 0.0031968939583748579, 0.0037296751979738474, 0.0063329478725790977, 0.018839821219444275, 0.0032716910354793072, 0.0023614433594048023, 0.0039766966365277767, 0.0038398168981075287, 0.0058449874632060528, 0.0038916468620300293, 0.0043661408126354218, 0.0074707414023578167, 0.0085060354322195053, 0.005637116264551878, 0.011913428083062172, 0.0059777111746370792, 0.0033884008880704641, 0.0028003996703773737, 0.0042555420659482479, 0.0040017352439463139, 0.0037801049184054136, 0.0036805039271712303, 0.0034389791544526815, 0.0044175437651574612, 0.0046241311356425285, 0.0061166915111243725, 0.009288703091442585, 0.0037424322217702866, 0.0033958577550947666, 0.0081394994631409645, 0.00764811085537076, 0.010046888142824173, 0.0057477657683193684, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data24[48] = { -3081, 9567, 7400, -1423, 176, 13170, 5553, 2807, 17117, 2362, -3460, 2703, 5452, 2560, -641, 1765, -2180, 9803, -5462, -1164, 1599, 1430, 548, -1030, 247, 4194, -2197, -2511, -977, -4456, 16508, 5342, 1106, 1655, 785, 2058, 2401, 14173, 2358, 497, 11752, -2805, 1384, 2542, -2817, -3803, 23992, 4870, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00016967319243121892, 9.3673057563137263e-05, 0.00010844413918675855, 0.00017833359015639871, 0.00032438358175568283, 6.5545056713744998e-05, 0.00015947621432133019, 0.00016355962725356221, 6.0742990172002465e-05, 0.00023536321532446891, 0.00012971644173376262, 0.00018857218674384058, 0.00012492841051425785, 0.00018976617138832808, 0.0002350449503865093, 0.00012585717195179313, 0.00016527091793250293, 9.7282303613610566e-05, 8.8622720795683563e-05, 0.00025179388467222452, 0.00022967660333961248, 0.00016444016364403069, 0.00020847017003688961, 0.00015421352873090655, 0.00024149367527570575, 0.00012031463120365515, 0.00018574039859231561, 0.00013474840670824051, 0.00020022050011903048, 0.00010647717135725543, 6.830738129792735e-05, 0.00013297029363457114, 0.00021897273836657405, 0.00020887026039417833, 0.00017245671187993139, 0.00017988904437515885, 0.00013253503129817545, 6.3008868892211467e-05, 0.00020933723135385662, 0.00017742713680490851, 8.6029351223260164e-05, 8.5886429587844759e-05, 0.000190277787623927, 0.00017436203779652715, 0.00019475504814181477, 0.00013245837180875242, 4.6647255658172071e-05, 0.00011697735317284241, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 49,27,-59,16,-36,54,-127,18, 
  /* [1][0][][] */ 11,-62,-115,1,-6,-24,127,-113, 
  /* [2][0][][] */ -127,-54,-79,-41,-36,57,-117,-13, 
  /* [3][0][][] */ -55,-39,22,-11,-20,-127,-109,-22, 
  /* [4][0][][] */ -40,-127,-42,17,61,18,-42,-42, 
  /* [5][0][][] */ 63,-27,79,53,-127,66,-81,-92, 
  /* [6][0][][] */ 40,-127,-63,-25,-8,65,-41,-87, 
  /* [7][0][][] */ -34,-87,-63,-56,81,-127,-1,13, 
  /* [8][0][][] */ 41,59,48,70,29,-57,0,127, 
  /* [9][0][][] */ -24,-55,-47,5,51,-21,127,-14, 
  /* [10][0][][] */ -27,22,-127,25,31,15,100,-119, 
  /* [11][0][][] */ 3,-33,-32,-3,-127,19,3,54, 
  /* [12][0][][] */ 81,53,-25,37,-85,127,78,-10, 
  /* [13][0][][] */ -44,-7,23,-18,39,-127,-6,67, 
  /* [14][0][][] */ -108,-47,3,37,12,64,-127,-117, 
  /* [15][0][][] */ 70,95,59,10,-127,43,126,-66, 
  /* [16][0][][] */ 4,-47,11,63,-1,-70,12,-127, 
  /* [17][0][][] */ -84,127,20,-14,-63,-48,-84,-77, 
  /* [18][0][][] */ 121,127,-102,-91,114,108,-84,-111, 
  /* [19][0][][] */ -27,76,-14,14,-127,2,-65,-93, 
  /* [20][0][][] */ -127,-9,9,12,19,19,112,46, 
  /* [21][0][][] */ -33,-6,47,14,-91,-105,-127,28, 
  /* [22][0][][] */ -4,-38,-45,-2,-127,2,9,54, 
  /* [23][0][][] */ 58,7,-21,-9,127,63,-86,79, 
  /* [24][0][][] */ 127,7,-43,32,-80,7,11,-12, 
  /* [25][0][][] */ 18,-70,54,113,-61,-127,19,123, 
  /* [26][0][][] */ 15,127,3,49,80,-16,15,-11, 
  /* [27][0][][] */ -127,111,60,-19,117,-62,0,92, 
  /* [28][0][][] */ -78,-72,-66,-31,88,-127,21,-17, 
  /* [29][0][][] */ -63,-19,39,52,127,-87,-96,84, 
  /* [30][0][][] */ 127,48,-114,-98,-69,-91,-73,-70, 
  /* [31][0][][] */ 32,-2,46,65,-127,5,40,0, 
  /* [32][0][][] */ 127,19,56,44,-29,-55,84,53, 
  /* [33][0][][] */ 127,29,-41,12,-113,-64,20,46, 
  /* [34][0][][] */ 39,-11,-25,25,-41,127,21,-80, 
  /* [35][0][][] */ 127,39,-14,-40,46,-96,28,118, 
  /* [36][0][][] */ -28,-49,74,-97,-29,-16,77,-127, 
  /* [37][0][][] */ 86,-65,61,48,125,-16,35,-127, 
  /* [38][0][][] */ 62,127,4,-27,-22,21,20,78, 
  /* [39][0][][] */ 25,8,-72,62,-19,-55,-80,127, 
  /* [40][0][][] */ -15,-37,1,-34,22,-127,21,46, 
  /* [41][0][][] */ -28,49,-127,-58,96,113,61,-113, 
  /* [42][0][][] */ 30,-41,-47,21,88,127,30,56, 
  /* [43][0][][] */ 8,41,-21,32,-127,-89,56,-67, 
  /* [44][0][][] */ -127,-52,-13,-29,49,51,-102,-77, 
  /* [45][0][][] */ -68,52,-57,17,27,1,-61,127, 
  /* [46][0][][] */ -25,61,127,-12,-59,-42,-41,48, 
  /* [47][0][][] */ -127,-101,-44,-46,93,108,-24,80, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0026410310529172421, 0.0014580584829673171, 0.001687976298853755, 0.0027758334763348103, 0.0050491597503423691, 0.0010202350094914436, 0.0024823108687996864, 0.002545870840549469, 0.00094548886409029365, 0.0036635224241763353, 0.0020190882496535778, 0.0029352013953030109, 0.0019445605576038361, 0.0029537861701101065, 0.003658568486571312, 0.0019590170122683048, 0.0025725078303366899, 0.0015142378397285938, 0.0013794479891657829, 0.0039192722178995609, 0.0035750078968703747, 0.0025595768820494413, 0.0032449213322252035, 0.0024003952275961637, 0.0037589455023407936, 0.0018727452261373401, 0.0028911235276609659, 0.0020974127110093832, 0.0031165119726210833, 0.0016573596512898803, 0.0010632316116243601, 0.0020697356667369604, 0.003408398013561964, 0.0032511488534510136, 0.002684357576072216, 0.0028000448364764452, 0.0020629607606679201, 0.00098075822461396456, 0.0032584175933152437, 0.0027617241721600294, 0.0013390812091529369, 0.0013368565123528242, 0.0029617496766149998, 0.0027140146121382713, 0.0030314400792121887, 0.002061767503619194, 0.00072608317714184523, 0.001820799196138978, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data26[8] = { 13466, 19118, 4918, 5312, 2620, -16209, 9211, -9112, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00011114165681647137, 0.00011323160288156942, 0.00011617675772868097, 0.00015820539556443691, 0.00010259678674628958, 0.00011086335143772885, 6.0763231886085123e-05, 9.6279283752664924e-05, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ 33,-55,96,73,27,-34,27,3,0,51,-36,17,-48,-85,40,-3,-115,73,-35,63,-46,77,-1,-26,-4,-50,68,-35,-23,26,-37,101,-64,-8,-38,-86,-68,-49,-40,-18,-15,56,-127,8,51,22,22,48, 
  /* [1][0][][] */ -50,-29,63,-7,-30,28,-36,-34,46,-14,-3,-35,-18,11,-4,26,2,18,15,-5,-57,-33,-68,-29,25,-41,-29,-33,26,-72,-8,-127,-4,-62,-63,-70,-35,-87,-26,25,38,-21,86,-102,-49,-14,-20,-7, 
  /* [2][0][][] */ -53,84,-8,42,14,6,27,-33,81,-44,76,80,94,20,32,-51,101,1,13,35,-14,14,20,127,-117,-45,12,-15,2,88,-16,-81,-24,-1,12,-75,-16,2,-35,-10,82,-76,29,-4,23,-125,7,-13, 
  /* [3][0][][] */ 61,-25,-58,38,85,-82,4,-120,-31,-5,-61,-87,-21,127,-13,17,-46,-18,-65,-47,31,85,-8,-49,116,42,52,-72,28,-89,51,-67,59,60,114,-78,-45,19,-27,47,18,86,-73,28,-4,24,6,43, 
  /* [4][0][][] */ -46,34,-36,61,85,-32,24,-45,-35,-9,-56,29,-49,-15,-1,-54,17,54,-36,-34,-38,30,-62,-66,24,-5,15,-31,28,-37,-35,64,-5,69,-68,-72,-62,-66,-39,3,65,-49,127,27,7,88,-52,-54, 
  /* [5][0][][] */ 54,8,82,-13,-7,20,54,27,127,-1,73,-4,72,56,26,-62,-13,28,33,-48,-55,-73,13,39,22,-9,29,41,-39,-30,17,-19,-23,50,-24,60,48,0,-30,-45,-10,69,31,38,-19,-3,72,5, 
  /* [6][0][][] */ -14,-78,-22,21,43,-1,0,11,-52,-26,104,63,110,73,-31,45,116,-127,-23,-8,-15,-37,-113,43,-89,68,-33,-10,-14,-48,67,-58,99,22,-87,-24,-50,12,65,9,73,-81,-3,-86,-122,44,-52,23, 
  /* [7][0][][] */ -11,-30,-59,-34,20,106,1,0,-1,-58,-127,-98,42,58,-60,-48,-40,23,111,26,-13,-82,64,-15,116,-31,-75,97,-39,-9,-21,-86,-49,72,57,124,101,-62,-17,-34,-25,-3,46,-16,-4,-31,10,-61, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0058277533389627934, 0.0059373402036726475, 0.0060917707160115242, 0.0082955574616789818, 0.0053797001019120216, 0.0058131604455411434, 0.0031861423049122095, 0.005048439372330904, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data28[48] = { -950, 1334, 240, 524, -48, 10671, -362, -5410, -7120, -985, -9774, 496, -4890, -9062, -897, -269, -12337, 19441, -5043, 375, -1458, -356, -1392, -912, 28092, 667, -419, -1357, 403, 1229, -444, -11133, -809, 15648, -507, 8844, 104, -4985, -1031, 123, -5514, -803, 4648, 8168, 973, 11922, -504, -2397, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00020966268493793905, 9.7363903478253633e-05, 0.0003462628519628197, 0.00011544734297785908, 0.00012743451225105673, 0.00021329725859686732, 0.00021318029030226171, 0.00012463786697480828, 0.00025629607262089849, 0.00011067513696616516, 0.00029741579783149064, 0.00012307785800658166, 9.6310512162744999e-05, 0.00010579689114820212, 9.9815086286980659e-05, 0.00030786351999267936, 0.00017427551210857928, 6.5501008066348732e-05, 9.0033310698345304e-05, 0.00028746158932335675, 0.00020315581059549004, 0.00021812193153891712, 0.00013580426457338035, 0.0004725293256342411, 0.00014728786482010037, 0.00020849517022725195, 0.00014876866771373898, 0.00012668964336626232, 0.00015583095955662429, 0.00013202219270169735, 0.00027179843164049089, 0.00033809282467700541, 0.00029532788903452456, 8.0350640928372741e-05, 0.00034073082497343421, 0.00014307606033980846, 0.00012038047862006351, 6.9827008701395243e-05, 0.00030354436603374779, 0.00051401788368821144, 0.00014971250493545085, 0.00048337233602069318, 0.00038566411240026355, 0.000115303868369665, 0.00017785129602998495, 9.7371979791205376e-05, 0.00015706669364590198, 0.00018783821724355221, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ -5,-41,42,-30,127,-1,-10,-12,-33,45,-12,7,57,26,127,-40,18,-14,-41,-18,-32,-18,-65,32,-127,46,22,-36,-21,21,-15,-5,-27,37,18,2,85,59,36,-8,52,11,-11,-5,-102,-7,-36,-44, 5,-86,-65,-28,-44,0,35,29,18,-2,58,127,-19,61,-56,127,9,-46,37,-56,-73,-127,-79,86,-125,-89,14,124,9,36,125,9,-127,-127,-45,36,127,-76,125,9,47,-13,-20,-13,-58,-12,68,-1, 9,-13,-12,127,57,12,-79,-2,-20,-43,-24,-23,49,4,-59,-47,28,22,-10,-14,5,2,-25,21,-57,-64,-34,30,-6,29,-94,-9,12,87,20,18,1,78,-123,1,18,-6,-5,27,-127,0,-55,46, 
  /* [0][1][][] */ -115,-59,127,-10,-49,-27,79,18,15,91,12,14,43,30,97,28,24,-127,104,38,77,-5,47,-35,-14,-22,34,-45,16,55,40,58,41,-112,5,127,14,52,-38,-114,29,91,-18,-86,26,-78,-56,18, 127,-54,-69,-75,-7,-127,127,127,127,13,127,-45,-127,25,-40,-45,127,-93,127,127,127,89,127,-127,7,-26,97,-6,127,127,-127,127,32,-116,127,-101,-64,127,-95,121,-127,-127,127,-127,92,-127,127,-124, -17,-93,12,75,-32,-5,-44,5,-11,-127,-29,47,85,20,-53,44,25,0,-12,11,5,-18,42,-18,-6,11,-127,74,-78,3,81,17,-13,-95,-13,-44,66,12,127,10,22,53,-42,0,51,-33,-53,127, 
  /* [0][2][][] */ -7,113,31,-37,71,11,-33,-10,-30,18,-2,-5,53,17,82,9,-23,-12,2,-53,-11,14,5,17,-26,-16,33,13,-65,-113,-5,2,2,43,-16,35,-58,42,18,102,16,23,-5,7,15,-4,-17,-37, -1,98,-41,11,21,-32,8,37,28,15,26,-40,40,127,-76,-75,-7,-35,119,-86,-42,83,4,57,72,127,4,127,-81,-117,-14,2,94,-99,-80,1,-73,-37,-23,-127,53,-17,-58,82,42,14,21,9, 12,127,-11,32,18,13,-52,0,-22,-16,1,-10,59,0,-61,-1,-17,-6,-44,-32,-4,9,1,6,-54,33,-40,13,40,-81,20,4,7,78,5,-21,-49,53,16,0,-21,-1,0,-20,9,-1,0,35, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.012455395422875881, 0.0057840808294713497, 0.020570376887917519, 0.0068583604879677296, 0.0075704804621636868, 0.012671313248574734, 0.012664364650845528, 0.0074043399654328823, 0.015225737355649471, 0.0065748589113354683, 0.017668528482317924, 0.0073116649873554707, 0.0057215020060539246, 0.0062850578688085079, 0.0059296977706253529, 0.018289195373654366, 0.010353155434131622, 0.0038912072777748108, 0.0053485934622585773, 0.017077181488275528, 0.01206884253770113, 0.01295793242752552, 0.0080677010118961334, 0.028071468695998192, 0.0087499050423502922, 0.012386037036776543, 0.0088378749787807465, 0.0075262296013534069, 0.0092574227601289749, 0.0078430194407701492, 0.01614668220281601, 0.02008502185344696, 0.017544493079185486, 0.0047733765095472336, 0.020241737365722656, 0.0084996949881315231, 0.007151422556489706, 0.004148201085627079, 0.018032608553767204, 0.030536172911524773, 0.0088939452543854713, 0.028715617954730988, 0.022911081090569496, 0.0068498370237648487, 0.010565581731498241, 0.0057845604605972767, 0.00933083426207304, 0.01115887239575386, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data30[48] = { 11540, 4502, 54838, -4603, -2499, 14115, -2035, 2038, 4959, 96, 14374, 760, 4298, 6618, 5478, 6336, 6112, 4924, -1774, 11659, 2809, 638, 2015, 20421, 59618, 9596, 8311, -3111, -56, 12054, 14862, 19183, 25652, 9060, 14870, -2790, 728, 4395, 16687, 11348, 1500, 29580, 28688, 7827, 15336, 3736, 7541, 1732, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 7.3344475822523236e-05, 0.00012486525520216674, 2.3472925022360869e-05, 0.00011089361942140386, 0.000163393619004637, 7.5750664109364152e-05, 0.000110088505607564, 0.00028106657555326819, 0.00012380322732497007, 0.00013324855535756797, 6.1522609030362219e-05, 0.00017746569938026369, 0.0001175069555756636, 0.00011442315008025616, 0.00010160642705159262, 0.00011997509864158928, 8.0462166806682944e-05, 0.0001037982729030773, 0.00017177921836264431, 7.8563178249169141e-05, 0.00012549609527923167, 0.00016507567488588393, 0.00013660659897141159, 4.7472112782998011e-05, 2.6602299840305932e-05, 8.927266753744334e-05, 0.0001006147067528218, 0.00013338349526748061, 0.00028143002418801188, 7.1669135650154203e-05, 6.0909889725735411e-05, 5.0369384553050622e-05, 3.8207519537536427e-05, 9.5685834821779281e-05, 6.0011399909853935e-05, 9.0460955107118934e-05, 0.0001641436101635918, 9.9275297543499619e-05, 5.3439103794516996e-05, 7.8342054621316493e-05, 0.00010421066690469161, 3.5017903428524733e-05, 4.0672861359780654e-05, 9.8646196420304477e-05, 6.3293467974290252e-05, 0.00016660135588608682, 0.00010246389138046652, 0.00013044140359852463, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ -10,41,15,-127,-82,11,19,122, 
  /* [1][0][][] */ 103,1,-2,9,-91,38,127,30, 
  /* [2][0][][] */ -7,113,-38,-27,-41,85,-42,-127, 
  /* [3][0][][] */ 64,-64,-95,107,-127,-38,-4,-32, 
  /* [4][0][][] */ 42,-62,51,-9,-127,4,49,25, 
  /* [5][0][][] */ -19,54,-10,-97,-127,-6,-31,10, 
  /* [6][0][][] */ 43,-11,32,26,127,-18,-2,-124, 
  /* [7][0][][] */ 14,30,25,127,24,-9,1,19, 
  /* [8][0][][] */ 27,22,18,-41,36,127,19,-35, 
  /* [9][0][][] */ 110,37,-2,15,-71,-50,127,78, 
  /* [10][0][][] */ 5,68,-69,-36,7,127,87,-63, 
  /* [11][0][][] */ -15,-39,-127,107,-69,28,-14,78, 
  /* [12][0][][] */ -89,-83,50,50,24,-127,-37,6, 
  /* [13][0][][] */ 40,35,34,55,-62,127,17,-40, 
  /* [14][0][][] */ 6,-100,6,-8,-63,-82,-127,98, 
  /* [15][0][][] */ -81,32,-4,12,79,-10,-127,-35, 
  /* [16][0][][] */ 101,90,-105,-127,51,127,126,47, 
  /* [17][0][][] */ -110,127,-125,48,-19,-33,31,-119, 
  /* [18][0][][] */ 33,-3,-93,127,-14,-33,-35,-59, 
  /* [19][0][][] */ 127,14,6,24,-37,7,127,59, 
  /* [20][0][][] */ 46,-76,-80,127,45,-33,-20,-65, 
  /* [21][0][][] */ 26,57,127,-116,48,-20,23,-108, 
  /* [22][0][][] */ -88,-26,-127,60,-38,33,16,110, 
  /* [23][0][][] */ 83,18,44,45,-127,111,65,-48, 
  /* [24][0][][] */ -9,-1,-127,77,-43,25,43,68, 
  /* [25][0][][] */ 48,-30,-85,127,64,4,-40,-22, 
  /* [26][0][][] */ -71,23,127,-98,-16,34,66,-9, 
  /* [27][0][][] */ -73,76,127,4,24,-17,78,17, 
  /* [28][0][][] */ -59,-104,33,-127,-15,8,-5,-22, 
  /* [29][0][][] */ -80,-74,-14,91,-5,-127,-7,55, 
  /* [30][0][][] */ -127,56,114,-23,36,41,70,30, 
  /* [31][0][][] */ -56,52,81,-127,-40,21,30,59, 
  /* [32][0][][] */ -91,102,91,-127,14,-4,17,127, 
  /* [33][0][][] */ 10,107,-50,45,28,15,-127,-29, 
  /* [34][0][][] */ 98,28,127,-112,-103,-116,56,-58, 
  /* [35][0][][] */ 94,-2,32,119,72,-78,28,-127, 
  /* [36][0][][] */ 23,70,127,-104,22,-27,49,-113, 
  /* [37][0][][] */ -47,-46,92,55,4,-127,89,-13, 
  /* [38][0][][] */ 84,6,93,55,-40,-60,127,31, 
  /* [39][0][][] */ 62,-88,-23,3,-127,2,68,62, 
  /* [40][0][][] */ -32,39,-127,106,-50,52,-88,121, 
  /* [41][0][][] */ -126,-16,-49,-2,127,14,-101,23, 
  /* [42][0][][] */ -86,59,-34,-35,127,37,-117,-53, 
  /* [43][0][][] */ 127,108,-30,119,-9,-107,51,71, 
  /* [44][0][][] */ 4,9,94,4,40,-127,11,-37, 
  /* [45][0][][] */ -3,-82,127,82,-35,-19,-116,12, 
  /* [46][0][][] */ 41,-111,-127,62,-90,21,5,-27, 
  /* [47][0][][] */ -112,-39,52,2,84,30,-127,-46, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0025461269542574883, 0.0043346523307263851, 0.00081485410919412971, 0.0038496318738907576, 0.0056721502915024757, 0.0026296570431441069, 0.0038216826505959034, 0.0097571248188614845, 0.0042977845296263695, 0.004625675268471241, 0.0021357352379709482, 0.0061606578528881073, 0.0040792115032672882, 0.0039721583016216755, 0.0035272303503006697, 0.0041648922488093376, 0.0027932149823755026, 0.0036033196374773979, 0.0059632533229887486, 0.0027272922452539206, 0.0043565514497458935, 0.005730542354285717, 0.0047422489151358604, 0.0016479772748425603, 0.00092348922044038773, 0.0030990683007985353, 0.0034928030800074339, 0.0046303598210215569, 0.0097697414457798004, 0.0024879681877791882, 0.0021144647616893053, 0.0017485549906268716, 0.0013263602741062641, 0.0033216990996152163, 0.002083274070173502, 0.0031403193715959787, 0.0056981858797371387, 0.0034463061019778252, 0.0018551191315054893, 0.0027196160517632961, 0.0036176356952637434, 0.0012156338198110461, 0.0014119436964392662, 0.0034244670532643795, 0.0021972097456455231, 0.0057835057377815247, 0.0035569970495998859, 0.0045282263308763504, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data32[8] = { -13618, 2509, -19916, 841, 3234, -4186, 12254, 1099, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00014004051627125591, 0.00010720940917963162, 8.3774772065225989e-05, 5.5959495512070134e-05, 0.00012842983414884657, 0.00011321414785925299, 0.00010935107275145128, 0.00010307617776561528, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ 45,103,-39,67,0,-8,-18,7,60,-60,5,-28,11,9,-31,-50,1,-19,28,13,-53,-32,-37,11,16,14,23,-6,18,9,-25,24,-62,10,110,-127,-26,24,-12,114,-32,15,13,-5,-13,39,29,-46, 
  /* [1][0][][] */ 1,-49,34,48,-15,-17,-16,-23,46,-42,92,44,22,12,-44,-75,127,40,13,12,-68,35,32,-16,-51,-96,-38,-53,-13,-58,43,-41,-10,-20,-30,11,4,-20,81,-53,-14,31,-60,36,76,58,18,45, 
  /* [2][0][][] */ 76,-26,-11,-15,109,108,61,79,-31,-8,1,-29,-9,46,59,31,-23,-34,61,-66,-43,-52,-50,65,-91,-95,117,20,64,-67,-63,17,-127,93,106,16,-9,-2,-3,20,27,69,23,-66,-18,22,60,-49, 
  /* [3][0][][] */ 85,-34,13,-17,127,126,27,44,-32,-29,25,60,-122,37,62,16,-1,18,79,-116,-99,19,38,93,1,-30,58,30,55,-58,3,-13,-111,67,-59,-118,26,-41,67,-49,48,-96,-107,-25,-65,38,-21,65, 
  /* [4][0][][] */ 36,43,-30,-37,-16,-14,-18,-17,2,-5,-11,-11,-33,-19,63,54,-38,-19,-38,48,31,-14,-14,3,-52,-42,-8,54,-16,14,-20,24,-35,-13,22,-127,-7,23,13,51,11,-11,-14,-25,44,-3,86,-25, 
  /* [5][0][][] */ 67,54,-92,49,5,2,-8,28,-87,-58,-59,-22,35,24,47,31,42,-64,43,127,-68,-47,-60,50,30,-25,-40,65,29,30,-58,7,-7,-1,-55,1,-4,18,-24,69,15,79,-9,-43,121,28,19,-61, 
  /* [6][0][][] */ -33,-74,18,-50,-38,-42,-80,-75,-36,-59,-111,41,-58,-50,102,90,-127,9,23,-22,20,53,68,15,-13,-8,-72,82,-80,-39,39,80,12,-61,91,36,24,49,-15,-82,-19,-61,-28,14,-44,-18,-9,62, 
  /* [7][0][][] */ 75,18,-14,43,18,11,12,3,79,-11,-14,-19,61,6,-15,-20,-55,-3,-31,2,-1,-23,-27,-24,73,-127,14,-1,4,97,-22,17,-75,25,-61,-46,-15,26,28,25,20,71,-33,-15,-39,32,42,-24, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.0070550111122429371, 0.0054010339081287384, 0.0042204353958368301, 0.0028191474266350269, 0.006470083724707365, 0.005703542847186327, 0.0055089271627366543, 0.0051928083412349224, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data34[48] = { 596, 7925, 804, 1006, -350, 289, 7131, 7268, -298, -8431, 335, 156, 6105, 4215, 21661, 17128, -751, -1550, 1450, 9025, 17424, 603, -1079, -509, 3760, -66, 3247, 18749, 6494, 12869, 22, 1980, -1369, -4063, -3616, 1082, -393, -24, -16, 3961, 3692, 4600, -6749, 677, 1516, -365, 11592, -755, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 0.00010547466081334278, 0.00013235840015113354, 0.00052351877093315125, 6.5891043050214648e-05, 0.00059427879750728607, 0.00065954873571172357, 0.00017029335140250623, 0.0001909636048367247, 7.2494862251915038e-05, 0.00018572394037619233, 0.00045402580872178078, 0.00027218193281441927, 0.00023359237820841372, 0.00016765561304055154, 6.6946202423423529e-05, 6.2344115576706827e-05, 0.00011844153050333261, 0.00046074579586274922, 5.9081306972075254e-05, 8.6104839283507317e-05, 5.9388366935309023e-05, 0.00066545553272590041, 0.0011373140150681138, 0.00024802910047583282, 6.3415282056666911e-05, 0.00013219316315371543, 9.6065632533282042e-05, 0.00011386471305740997, 0.00017150331404991448, 0.00012645407696254551, 0.00040476559661328793, 0.00025550683494657278, 0.00010200938413618132, 0.00023574748774990439, 8.6329659097827971e-05, 7.4705545557662845e-05, 0.00029018882196396589, 0.00032170332269743085, 0.00011491987970657647, 0.00018604978686198592, 9.6153940830845386e-05, 0.00022492987045552582, 0.00011690283281495795, 0.00034917029552161694, 8.865633571986109e-05, 0.00026166555471718311, 8.0886675277724862e-05, 0.00061800854746252298, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -11,-88,-104,88,-83,6,-87,-67,55,78,102,-34,5,10,-71,-53,100,-90,34,-50,-22,-110,-35,-74,83,101,-6,-120,4,-43,62,90,39,70,64,19,94,76,29,17,-113,-10,25,49,-25,15,-51,-91, 93,-5,30,70,-124,43,-72,17,90,124,127,63,-9,-75,-117,-101,127,-37,100,-97,-102,120,127,39,127,96,44,-127,-68,-50,-105,105,86,127,93,111,-21,61,53,-72,-87,-91,22,-50,-39,116,-60,111, 106,0,60,54,-79,12,-24,-7,18,94,-10,-24,-79,0,-26,-44,42,82,70,-25,-70,-29,-79,86,47,18,20,-39,-1,-34,27,32,49,94,7,67,-2,27,47,-7,-46,-6,12,12,-10,52,-29,3, 
  /* [0][1][][] */ 45,-127,118,108,94,-72,-127,-127,109,83,78,-45,10,-1,-108,-77,106,127,49,-113,-46,105,33,-127,92,123,101,-120,-1,-109,-77,98,99,-3,100,54,34,108,60,5,-7,-20,82,99,-111,69,-123,121, 127,-7,-1,127,127,-127,-104,10,127,127,108,58,-28,-127,-127,-127,126,63,127,-127,-127,-127,-97,49,98,127,127,-115,-127,-127,127,127,127,12,127,127,-5,127,127,-127,11,-127,123,-85,-127,127,-113,-127, 93,-4,-127,68,89,-60,-50,-3,26,70,-10,-14,-127,-2,-15,-31,48,-103,82,-32,-73,4,75,86,45,48,-1,-46,-7,-84,-37,24,48,4,26,64,1,33,82,-2,-13,-6,55,-13,-76,52,-54,18, 
  /* [0][2][][] */ 62,-77,9,31,0,65,-65,-83,27,33,-12,57,9,14,-47,-35,13,-37,20,-66,-20,-3,18,-81,17,39,76,-11,0,-114,14,10,65,-81,65,18,-127,13,15,3,32,-13,90,-127,-57,6,-76,-5, 43,8,7,52,10,92,-29,4,21,66,-20,-127,-10,-80,-51,-36,30,-11,48,-110,-34,-15,-19,33,36,56,81,-28,-83,-126,-27,12,58,-87,64,33,24,39,63,-49,127,-59,127,105,-89,83,-127,23, -29,-9,-3,32,-20,40,-19,-2,2,34,-92,42,-56,1,5,-12,-11,24,27,-11,-32,19,21,41,20,40,29,5,-6,-39,16,-26,5,-46,11,19,11,-7,44,8,71,6,41,-12,-22,16,-29,0, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0044826730154454708, 0.0056252316571772099, 0.022249547764658928, 0.002800369169563055, 0.025256847962737083, 0.028030820190906525, 0.0072374674491584301, 0.0081159528344869614, 0.003081031609326601, 0.0078932670876383781, 0.019296096637845039, 0.011567731387913227, 0.0099276760593056679, 0.0071253632195293903, 0.0028452135156840086, 0.0026496248319745064, 0.0050337649881839752, 0.019581696018576622, 0.0025109555572271347, 0.0036594555713236332, 0.0025240054819732904, 0.028281860053539276, 0.04833584651350975, 0.010541236028075218, 0.0026951495092362165, 0.0056182094849646091, 0.0040827891789376736, 0.0048392503522336483, 0.0072888904251158237, 0.0053742979653179646, 0.017202537506818771, 0.010859040543437004, 0.0043353987857699394, 0.010019267909228802, 0.0036690104752779007, 0.003174985758960247, 0.012333025224506855, 0.013672390952706337, 0.0048840949311852455, 0.0079071158543229103, 0.0040865424089133739, 0.0095595195889472961, 0.0049683703109622002, 0.014839737676084042, 0.0037678941152989864, 0.01112078595906496, 0.0034376836847513914, 0.026265362277626991, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data36[48] = { 21251, 8453, 18288, 4538, 8013, 7719, -7895, 8175, 4983, -4813, -6117, 10315, -5898, -9017, 16139, 3087, -3814, 4512, -3290, 5944, 434, 7745, 5285, -4992, -671, -8982, 5023, -6606, 7166, 14207, 704, 700, 13860, 20628, 15964, 8056, 9718, -8413, 1736, 8468, -1569, -8184, 7947, 3273, 588, -12205, -21800, 5018, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00020638902788050473, 0.00031325282179750502, 5.6462948123225942e-05, 0.00040200233343057334, 0.00022773393720854074, 0.00022796538542024791, 0.00086373049998655915, 0.0004649126494769007, 0.00059176806826144457, 0.00029838393675163388, 6.7766239226330072e-05, 0.00022330976207740605, 0.00025213335175067186, 0.00056290137581527233, 0.0002607945934869349, 0.00091237138258293271, 0.00055025849724188447, 0.00016091328870970756, 0.00060110230697318912, 0.00091274082660675049, 0.00041055271867662668, 0.00023600547865498811, 5.6647073506610468e-05, 0.00025447190273553133, 0.00060814048629254103, 0.00043186591938138008, 0.0005209866794757545, 0.00022548664128407836, 0.00049023423343896866, 0.00036603541229851544, 0.00015944901679176837, 0.00029902521055191755, 0.00040409964276477695, 0.00013825183850713074, 0.00021118302538525313, 0.00019649387104436755, 0.00027795138885267079, 0.00072686164639890194, 0.00028092434513382614, 0.0003340299881529063, 0.00064851244678720832, 0.00032295138225890696, 0.00038657238474115729, 0.00012320882524363697, 0.00070936657721176744, 0.00031210141605697572, 0.00033863593125715852, 0.00020317082817200571, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -104,-111,23,-127,-69,1,-7,2, 
  /* [1][0][][] */ -127,-10,91,-1,-53,25,7,13, 
  /* [2][0][][] */ 29,-4,13,127,26,-19,-14,-6, 
  /* [3][0][][] */ -107,-74,-27,-19,36,127,-48,-33, 
  /* [4][0][][] */ -5,-24,-10,-2,-10,5,-127,-69, 
  /* [5][0][][] */ -1,-31,-16,-5,-8,13,-127,-71, 
  /* [6][0][][] */ 127,8,15,-10,-67,21,5,-4, 
  /* [7][0][][] */ -127,-26,-19,5,67,17,0,14, 
  /* [8][0][][] */ 23,40,-11,-11,-27,-127,38,17, 
  /* [9][0][][] */ 72,21,-14,-8,-25,-2,-8,127, 
  /* [10][0][][] */ 113,-14,-117,8,-87,-9,35,127, 
  /* [11][0][][] */ -127,108,16,-40,96,-83,11,20, 
  /* [12][0][][] */ 127,-32,-102,16,51,-9,-4,-21, 
  /* [13][0][][] */ 127,11,12,-10,-30,29,13,-10, 
  /* [14][0][][] */ -127,-97,99,-34,72,-14,-54,-123, 
  /* [15][0][][] */ 35,73,0,-4,-8,-127,-21,9, 
  /* [16][0][][] */ -12,-69,10,6,11,127,10,6, 
  /* [17][0][][] */ 26,-119,-74,-8,-40,127,-57,-14, 
  /* [18][0][][] */ 42,-19,-20,-20,-21,29,127,-8, 
  /* [19][0][][] */ -6,24,-1,-127,-10,37,-5,-12, 
  /* [20][0][][] */ -78,-31,75,6,55,99,0,-127, 
  /* [21][0][][] */ -19,-7,31,-30,-17,17,-127,-81, 
  /* [22][0][][] */ 76,-10,12,127,-16,-15,58,40, 
  /* [23][0][][] */ 127,-11,-113,-4,27,-16,8,10, 
  /* [24][0][][] */ -32,22,26,29,11,5,-127,-85, 
  /* [25][0][][] */ 127,12,-87,6,14,-4,8,25, 
  /* [26][0][][] */ 2,52,-28,-127,-24,17,1,-5, 
  /* [27][0][][] */ 127,19,-106,-9,-98,45,14,81, 
  /* [28][0][][] */ -127,-21,-25,16,55,13,1,35, 
  /* [29][0][][] */ -6,-127,-17,-120,-11,27,-13,-20, 
  /* [30][0][][] */ -3,85,127,37,38,-101,105,38, 
  /* [31][0][][] */ -66,-7,-127,41,4,-19,96,94, 
  /* [32][0][][] */ -5,-116,3,-127,-11,8,-9,-18, 
  /* [33][0][][] */ 13,-127,-4,-126,8,12,3,-26, 
  /* [34][0][][] */ -27,-51,30,-96,37,-54,127,85, 
  /* [35][0][][] */ -127,15,51,0,-103,-17,31,87, 
  /* [36][0][][] */ -126,25,127,-11,-31,13,-30,26, 
  /* [37][0][][] */ 127,11,-8,-5,-74,19,1,19, 
  /* [38][0][][] */ -73,0,78,38,54,-56,44,127, 
  /* [39][0][][] */ -127,-1,77,-4,-68,8,-4,0, 
  /* [40][0][][] */ -6,33,47,-17,25,-5,127,53, 
  /* [41][0][][] */ 127,-11,-72,1,54,10,8,-7, 
  /* [42][0][][] */ -12,-127,34,-13,20,7,-5,-22, 
  /* [43][0][][] */ 8,127,116,-11,56,-98,68,13, 
  /* [44][0][][] */ 5,-10,-1,112,1,-127,-1,1, 
  /* [45][0][][] */ 127,-31,40,-7,-60,104,4,3, 
  /* [46][0][][] */ 14,123,-20,98,-3,127,29,41, 
  /* [47][0][][] */ -13,37,14,-31,27,-36,127,69, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.004901994951069355, 0.0074401427991688251, 0.0013410649262368679, 0.0095480531454086304, 0.0054089631885290146, 0.0054144603200256824, 0.020514668896794319, 0.011042251251637936, 0.014055224135518074, 0.0070869880728423595, 0.0016095321625471115, 0.0053038834594190121, 0.0059884791262447834, 0.0133696049451828, 0.0061941947788000107, 0.02166995033621788, 0.013069320470094681, 0.003821890102699399, 0.014276924543082714, 0.021678725257515907, 0.0097511354833841324, 0.0056054224260151386, 0.0013454381842166185, 0.0060440232045948505, 0.01444409042596817, 0.010257350280880928, 0.01237407885491848, 0.0053555872291326523, 0.011643670499324799, 0.0086937947198748589, 0.0037871117237955332, 0.0071022189222276211, 0.0095978667959570885, 0.0032836524769663811, 0.0050158584490418434, 0.0046669729053974152, 0.0066016898490488529, 0.017263865098357201, 0.0066723013296723366, 0.0079336259514093399, 0.015402973629534245, 0.007670495193451643, 0.0091815730556845665, 0.0029263622127473354, 0.016848335042595863, 0.0074127954430878162, 0.0080430228263139725, 0.0048255589790642262, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data38[8] = { 4514, -4766, -314, 3331, 2197, 654, -3305, 3275, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 7.8501776442863047e-05, 0.00013551005395129323, 8.8734726887196302e-05, 6.6518754465505481e-05, 0.00012686685658991337, 0.00019539942150004208, 9.5331517513841391e-05, 0.00017624990141484886, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data39[8*1*1*8] = { 
  /* [0][0][][] */ -26,-6,-45,-33,-22,36,-127,-10, 
  /* [1][0][][] */ 20,94,0,127,9,-9,-10,-39, 
  /* [2][0][][] */ 127,-7,-34,-57,-66,52,100,-54, 
  /* [3][0][][] */ 11,-127,47,-81,14,-90,30,57, 
  /* [4][0][][] */ 127,-2,-59,-7,29,-4,-120,-47, 
  /* [5][0][][] */ 2,-32,3,35,4,-127,0,11, 
  /* [6][0][][] */ 127,-30,113,0,102,-27,-9,7, 
  /* [7][0][][] */ -127,-4,-94,-7,-102,5,31,6, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,8 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0034012694377452135, 0.0058712838217616081, 0.0038446355611085892, 0.0028820775914937258, 0.0054967976175248623, 0.0084661282598972321, 0.0041304565966129303, 0.0076364311389625072, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data40[8] = { -10614, 11400, 600, -12690, -718, -13535, 248, 138, };
const TfArray<1, int> tensor_dimension40 = { 1, { 8 } };
const TfArray<8, float> quant40_scale = { 8, { 0.0003156493476126343, 0.00038106131250970066, 0.0002243620838271454, 0.00030911623616702855, 0.00028928107349202037, 0.00034247792791575193, 0.0011410051956772804, 0.0020699566230177879, } };
const TfArray<8, int> quant40_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data41[1*3*3*8] = { 
  /* [0][0][][] */ 0,-1,17,17,12,0,9,36, 8,0,-37,127,-19,1,-4,36, -2,0,-5,16,1,3,-6,27, 
  /* [0][1][][] */ -4,-2,127,-24,127,0,-111,46, 127,-127,-98,5,-93,127,-14,-127, -26,1,21,-24,0,1,127,45, 
  /* [0][2][][] */ -1,-2,15,4,5,-3,15,40, 1,1,-40,-2,-15,0,-10,-103, -3,-1,-3,0,-1,-3,-6,44, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,8 } };
const TfArray<8, float> quant41_scale = { 8, { 0.013415097258985043, 0.016195105388760567, 0.0095353880897164345, 0.013137439265847206, 0.012294445186853409, 0.014555311761796474, 0.04849272221326828, 0.087973155081272125, } };
const TfArray<8, int> quant41_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data42[8] = { 24267, 17699, 1029, 38379, 3004, 15065, 67451, 54, };
const TfArray<1, int> tensor_dimension42 = { 1, { 8 } };
const TfArray<8, float> quant42_scale = { 8, { 0.00010301583824912086, 0.00012394772784318775, 0.00012323432019911706, 7.1624061092734337e-05, 0.00017475335334893316, 0.00016336655244231224, 1.0662246495485306e-05, 2.9415212338790298e-05, } };
const TfArray<8, int> quant42_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data43[8*3*3*1] = { 
  /* [0][0][][] */ -57, 49, 8, 
  /* [0][1][][] */ -127, 120, -1, 
  /* [0][2][][] */ -43, 45, -1, 
  /* [1][0][][] */ 57, 127, 34, 
  /* [1][1][][] */ -70, -81, -46, 
  /* [1][2][][] */ 6, -43, 4, 
  /* [2][0][][] */ 29, 26, -47, 
  /* [2][1][][] */ 50, 67, -127, 
  /* [2][2][][] */ 19, 30, -59, 
  /* [3][0][][] */ 42, 53, 20, 
  /* [3][1][][] */ 53, 74, 26, 
  /* [3][2][][] */ -80, -127, -57, 
  /* [4][0][][] */ 4, -53, 48, 
  /* [4][1][][] */ 16, -127, 112, 
  /* [4][2][][] */ 5, -37, 32, 
  /* [5][0][][] */ 2, -56, 0, 
  /* [5][1][][] */ 0, 127, 2, 
  /* [5][2][][] */ 1, -75, 0, 
  /* [6][0][][] */ -20, -84, -6, 
  /* [6][1][][] */ -29, -127, -11, 
  /* [6][2][][] */ -12, -54, 0, 
  /* [7][0][][] */ 45, -127, 28, 
  /* [7][1][][] */ -19, -4, -13, 
  /* [7][2][][] */ -25, 72, -13, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 8,3,3,1 } };
const TfArray<8, float> quant43_scale = { 8, { 0.028145398944616318, 0.033864289522171021, 0.033669374883174896, 0.019568717107176781, 0.047745112329721451, 0.044634073972702026, 0.0029130780603736639, 0.0080366563051939011, } };
const TfArray<8, int> quant43_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023080140352249146, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.033719297498464584, } };
const TfArray<1, int> quant46_zero = { 1, { 55 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant47_scale = { 1, { 0.04210306704044342, } };
const TfArray<1, int> quant47_zero = { 1, { -30 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant50_scale = { 1, { 0.019849793985486031, } };
const TfArray<1, int> quant50_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant51_scale = { 1, { 0.028806291520595551, } };
const TfArray<1, int> quant51_zero = { 1, { -7 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.016833081841468811, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant53_scale = { 1, { 0.019071098417043686, } };
const TfArray<1, int> quant53_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.060026422142982483, } };
const TfArray<1, int> quant54_zero = { 1, { -24 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant55_scale = { 1, { 0.064245060086250305, } };
const TfArray<1, int> quant55_zero = { 1, { -13 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.0142102325335145, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,13,13,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.0142102325335145, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant58_scale = { 1, { 0.018488248810172081, } };
const TfArray<1, int> quant58_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant59_scale = { 1, { 0.035729169845581055, } };
const TfArray<1, int> quant59_zero = { 1, { -3 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant60_scale = { 1, { 0.013916186988353729, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant61_scale = { 1, { 0.020716695114970207, } };
const TfArray<1, int> quant61_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant62_scale = { 1, { 0.026851212605834007, } };
const TfArray<1, int> quant62_zero = { 1, { -21 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant63_scale = { 1, { 0.047456379979848862, } };
const TfArray<1, int> quant63_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant64_scale = { 1, { 0.01845935545861721, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant65_scale = { 1, { 0.023141408339142799, } };
const TfArray<1, int> quant65_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant66_scale = { 1, { 0.038135688751935959, } };
const TfArray<1, int> quant66_zero = { 1, { 15 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant67_scale = { 1, { 0.06652463972568512, } };
const TfArray<1, int> quant67_zero = { 1, { -10 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant68_scale = { 1, { 0.015719998627901077, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,6,6,32 } };
const TfArray<1, float> quant69_scale = { 1, { 0.022489484399557114, } };
const TfArray<1, int> quant69_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,6,6,2 } };
const TfArray<1, float> quant70_scale = { 1, { 0.041902389377355576, } };
const TfArray<1, int> quant70_zero = { 1, { -46 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfArray<4, int> tensor_dimension71 = { 4, { 1,6,6,2 } };
const TfArray<1, float> quant71_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant71_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant71 = { (TfLiteFloatArray*)&quant71_scale, (TfLiteIntArray*)&quant71_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteAddParams opdata3 = { kTfLiteActNone };
const TfArray<2, int> inputs3 = { 2, { 44,46 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfLiteConvParams opdata4 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs4 = { 3, { 47,37,36 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfArray<2, int> inputs5 = { 2, { 48,1 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteDepthwiseConvParams opdata6 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,35,34 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,33,32 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteConvParams opdata8 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,31,30 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteDepthwiseConvParams opdata9 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,29,28 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteConvParams opdata10 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs10 = { 3, { 53,27,26 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteAddParams opdata11 = { kTfLiteActNone };
const TfArray<2, int> inputs11 = { 2, { 51,54 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfLiteConvParams opdata12 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs12 = { 3, { 55,25,24 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfArray<2, int> inputs13 = { 2, { 56,1 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteDepthwiseConvParams opdata14 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,23,22 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,21,20 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteConvParams opdata16 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,19,18 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteDepthwiseConvParams opdata17 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,17,16 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteConvParams opdata18 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs18 = { 3, { 61,15,14 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteAddParams opdata19 = { kTfLiteActNone };
const TfArray<2, int> inputs19 = { 2, { 59,62 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteConvParams opdata20 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,13,12 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteDepthwiseConvParams opdata21 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,11,10 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteConvParams opdata22 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs22 = { 3, { 65,9,8 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteAddParams opdata23 = { kTfLiteActNone };
const TfArray<2, int> inputs23 = { 2, { 63,66 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,7,6 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,5,4 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteConvParams opdata26 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs26 = { 3, { 69,3,2 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TfLiteSoftmaxParams opdata27 = { 1 };
const TfArray<1, int> inputs27 = { 1, { 70 } };
const TfArray<1, int> outputs27 = { 1, { 71 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 9216), (TfLiteIntArray*)&g0::tensor_dimension44, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 4608), (TfLiteIntArray*)&g0::tensor_dimension46, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension47, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension48, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension49, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension50, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension51, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension52, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension53, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension54, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension55, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 8112), (TfLiteIntArray*)&g0::tensor_dimension56, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension57, 8112, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 8112), (TfLiteIntArray*)&g0::tensor_dimension58, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 4608), (TfLiteIntArray*)&g0::tensor_dimension59, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1728), (TfLiteIntArray*)&g0::tensor_dimension60, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension61, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1728), (TfLiteIntArray*)&g0::tensor_dimension62, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 4320), (TfLiteIntArray*)&g0::tensor_dimension63, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1728), (TfLiteIntArray*)&g0::tensor_dimension64, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension65, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 2016), (TfLiteIntArray*)&g0::tensor_dimension66, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1728), (TfLiteIntArray*)&g0::tensor_dimension67, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension68, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1728), (TfLiteIntArray*)&g0::tensor_dimension69, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 80), (TfLiteIntArray*)&g0::tensor_dimension70, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension71, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant71))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[28] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[28] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 72, };
const size_t tflNodes_subgraph_index[] = {0, 28, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  71, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_3_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 72;
  for (size_t i = 0; i < 72; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_invoke() {
  for (size_t i = 0; i < 28; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
